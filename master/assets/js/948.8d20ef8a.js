(window.webpackJsonp=window.webpackJsonp||[]).push([[948],{1945:function(t,e,s){"use strict";s.r(e);var a=s(19),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"development-environment-on-ubuntu-lts-debian-linux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#development-environment-on-ubuntu-lts-debian-linux"}},[t._v("#")]),t._v(" Development Environment on Ubuntu LTS / Debian Linux")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://wiki.ubuntu.com/LTS",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ubuntu Linux LTS"),s("OutboundLink")],1),t._v(" (16.04) is the standard/preferred Linux development OS. It allows you to build for "),s("RouterLink",{attrs:{to:"/ko/setup/dev_env.html#supported-targets"}},[t._v("all PX4 targets")]),t._v(" (NuttX based hardware, Qualcomm Snapdragon Flight hardware, Linux-based hardware, Simulation, ROS).")],1),t._v(" "),s("p",[t._v("The following instructions explain how to "),s("em",[t._v("manually")]),t._v(" set up a development environment each of the supported targets.")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Tip")]),t._v(" We recommend that you use the "),s("a",{attrs:{href:"#convenience-bash-scripts"}},[t._v("Convenience bash scripts")]),t._v(" to install the Simulators and/or NuttX toolchain (this is easier than typing in the instructions below). Then follow just the additional instructions for other targets (e.g. Qualcomm Snapdragon Flight, Bebop, Raspberry Pi, etc.) Does not include dependencies for "),s("a",{attrs:{href:"#fast_rtps"}},[t._v("FastRTPS")]),t._v(". ")]),t._v(" "),s("li",[s("strong",[s("a",{attrs:{href:"https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/ubuntu_sim.sh",target:"_blank",download:""}},[t._v("ubuntu_sim.sh")])]),t._v(": "),s("strong",[t._v("ubuntu_sim_common_deps.sh")]),t._v(" + "),s("a",{attrs:{href:"#gazebo"}},[t._v("Gazebo8")]),t._v(" simulator. ")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Tip")]),t._v(" The scripts have been tested on a clean Ubuntu 16.04 LTS installation. They "),s("em",[t._v("may")]),t._v(" not work as expected if installed on top of an existing system.")])]),t._v(" "),s("p",[t._v("The instructions below explain how to download and use the scripts.")]),t._v(" "),s("p",[s("a",{attrs:{id:"sim_nuttx"}})]),t._v(" "),s("h2",{attrs:{id:"convenience-bash-scripts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#convenience-bash-scripts"}},[t._v("#")]),t._v(" Convenience Bash Scripts")]),t._v(" "),s("p",[t._v("The scripts are:")]),t._v(" "),s("p",[t._v("To use the scripts:")]),t._v(" "),s("ol",[s("li",[s("strong",[s("a",{attrs:{href:"https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/ubuntu_sim_common_deps.sh",target:"_blank",download:""}},[t._v("ubuntu_sim_common_deps.sh")])]),t._v(": "),s("a",{attrs:{href:"#common-dependencies"}},[t._v("Common Dependencies")]),t._v(", "),s("a",{attrs:{href:"#jmavsim"}},[t._v("jMAVSim")]),t._v(" simulator"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/PX4/PX4-Autopilot.git --recursive\n")])])])]),t._v(" "),s("li",[s("strong",[s("a",{attrs:{href:"https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/ubuntu_sim_nuttx.sh",target:"_blank",download:""}},[t._v("ubuntu_sim_nuttx.sh")])]),t._v(": "),s("strong",[t._v("ubuntu_sim.sh")]),t._v(" + NuttX tools."),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v(" ./Tools/setup/ubuntu.sh\n")])])]),s("ul",[s("li",[t._v("Acknowledge any prompts as the script progress.")]),t._v(" "),s("li",[t._v("We've created a number of bash scripts that you can use to install the Simulators and/or NuttX toolchain.")])])]),t._v(" "),s("li",[t._v("This requires computer restart on completion.")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Tip")]),t._v(" After setting up the build/simulation toolchain, see "),s("RouterLink",{attrs:{to:"/ko/setup/generic_dev_tools.html"}},[t._v("Additional Tools")]),t._v(" for information about other useful tools.")],1)]),t._v(" "),s("p",[t._v('The user needs to be part of the group "dialout":')]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Tip")]),t._v(" PX4 works with Gazebo 7, 8, and 9. The "),s("a",{attrs:{href:"http://gazebosim.org/tutorials?tut=install_ubuntu&cat=install",target:"_blank",rel:"noopener noreferrer"}},[t._v("installation instructions"),s("OutboundLink")],1),t._v(" above are for installing Gazebo 9.")]),t._v(" "),s("li",[s("strong",[t._v("Note")]),t._v(" If you're going work with ROS then follow the "),s("a",{attrs:{href:"#rosgazebo"}},[t._v("ROS/Gazebo")]),t._v(" instructions in the following section (these install Gazebo automatically, as part of the ROS installation).")]),t._v(" "),s("li",[t._v("You can verify the the NuttX installation by confirming the gcc version as shown:"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$arm")]),t._v("-none-eabi-gcc --version\n\n arm-none-eabi-gcc "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GNU Tools "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Arm Embedded Processors "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("-2017-q4-major"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.2")]),t._v(".1 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20170904")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("release"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ARM/embedded-7-branch revision "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255204")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n Copyright "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("C"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2017")]),t._v(" Free Software Foundation, Inc.\n This is "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),t._v(" software"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" see the "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("source")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" copying conditions.  There is NO\n warranty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" not even "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("-- Do we need to "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" to our scripts or can we assume correct version installs over?\n")])])])])]),t._v(" "),s("p",[t._v("Remove any old versions of the arm-none-eabi toolchain.")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" remove gcc-arm-none-eabi gdb-arm-none-eabi binutils-arm-none-eabi gcc-arm-embedded\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" add-apt-repository --remove ppa:team-gcc-arm-embedded/ppa\n")])])]),s("p",[t._v("--\x3e"),s("a",{attrs:{id:"raspberry-pi-hardware"}})]),t._v(" "),s("h2",{attrs:{id:"permission-setup"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#permission-setup"}},[t._v("#")]),t._v(" Permission Setup")]),t._v(" "),s("p",[t._v("The following instructions explain how to set up a build toolchain for RasPi on "),s("em",[t._v("Ubuntu 18.04")]),t._v(".")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Warning")]),t._v(" To build for Ubuntu 20.04 (focal) you must use docker (the GCC toolchain on Ubuntu 20.04 can build PX4, but the generated binary files are too new to run on actual Pi). For more information see [PilotPi with Raspberry Pi OS")])]),t._v(" "),s("h1",{attrs:{id:"additional-developer-information-for-using-px4-on-raspberry-pi-including-building-px4-natively-can-be-found-here-raspberry-pi-2-3-navio2-autopilot"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#additional-developer-information-for-using-px4-on-raspberry-pi-including-building-px4-natively-can-be-found-here-raspberry-pi-2-3-navio2-autopilot"}},[t._v("#")]),t._v(" Additional developer information for using PX4 on Raspberry Pi (including building PX4 natively) can be found here: "),s("a",{attrs:{href:"https://docs.px4.io/en/flight_controller/raspberry_pi_navio2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Raspberry Pi 2/3 Navio2 Autopilot"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("Update the package list and install the following dependencies for all PX4 build targets.")]),t._v(" "),s("ol",[s("li",[t._v("Download "),s("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/blob/master/Tools/setup/ubuntu.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("ubuntu.sh"),s("OutboundLink")],1),t._v(" "),t._v("\nand "),s("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/blob/master/Tools/setup/requirements.txt",target:"_blank",rel:"noopener noreferrer"}},[t._v("requirements.txt"),s("OutboundLink")],1),t._v(" from the PX4 source repository ("),s("strong",[t._v("/Tools/setup/")]),t._v("): "),s("br"),s("code",[t._v("wget https://raw.githubusercontent.com/PX4/PX4-Autopilot/master/Tools/setup/ubuntu.sh")]),t._v(" "),s("br"),s("code",[t._v("wget https://raw.githubusercontent.com/PX4/PX4-Autopilot/master/Tools/setup/requirements.txt")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("Note")]),t._v(" If you use an ubuntu-based distro and the command "),s("code",[t._v("rosdep install --from-paths src --ignore-src --rosdistro kinetic -y")]),t._v(" fails, you can try to force the command to run by executing "),s("code",[t._v("rosdep install --from-paths src --ignore-src --rosdistro kinetic -y --os ubuntu:xenial")])])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v(" ubuntu.sh --no-nuttx --no-sim-tools\n")])])])]),t._v(" "),s("li",[t._v("Then setup an cross-compiler (either GCC or clang) as described in the following sections.")])]),t._v(" "),s("h3",{attrs:{id:"how-to-use-the-scripts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#how-to-use-the-scripts"}},[t._v("#")]),t._v(" How to use the scripts")]),t._v(" "),s("p",[t._v("Ubuntu software repository provides a set of pre-compiled toolchains. Note that Ubuntu Focal comes up with "),s("code",[t._v("gcc-9-arm-linux-gnueabihf")]),t._v(" as its default installation which is not fully supported, so we must manually install "),s("code",[t._v("gcc-8-arm-linux-gnueabihf")]),t._v(" and set it as the default toolchain. This guide also applies to earlier Ubuntu releases (Bionic). The following instruction assumes you haven't installed any version of arm-linux-gnueabihf, and will set up the default executable with "),s("code",[t._v("update-alternatives")]),t._v(". Install them with the terminal command:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("usermod")]),t._v(" -a -G dialout "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$USER")]),t._v("\n")])])]),s("p",[t._v('{% include "_ninja_build_system.md" %}')]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" remove modemmanager\n")])])]),s("h3",{attrs:{id:"jmavsim"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jmavsim"}},[t._v("#")]),t._v(" jMAVSim")]),t._v(" "),s("p",[t._v("If you want to build PX4 for ARM64 devices, this section is required.")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" update -y\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("zip")]),t._v(" qtcreator cmake "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    build-essential genromfs ninja-build exiftool vim-common -y\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Required python packages")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" python-argparse "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    python-empy python-toml python-numpy python-yaml "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    python-dev python-pip -y\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -H pip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" --upgrade pip \n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" -H pip "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" pandas jinja2 pyserial cerberus\n")])])]),s("h3",{attrs:{id:"gazebo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gazebo"}},[t._v("#")]),t._v(" Gazebo")]),t._v(" "),s("p",[t._v("The following instructions can be used to install the FastRTPS 1.5 binaries to your home directory.")]),t._v(" "),s("p",[t._v("We recommend you to get clang from the Ubuntu software repository, as shown below:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# optional python tools\nsudo -H pip install pyulog\n")])])]),s("p",[t._v("Install the dependencies for "),s("RouterLink",{attrs:{to:"/ko/simulation/jmavsim.html"}},[t._v("jMAVSim Simulation")]),t._v(".")],1),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/raspberrypi/tools.git "),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("HOME")]),t._v("}")]),t._v("/rpi-tools\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# test compiler")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("/rpi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-gcc -v\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# permanently update PATH variable by modifying ~/.profile")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'export PATH="),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),t._v(":"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("/rpi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" ~/.profile\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# update PATH variable only for this session")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PATH")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$PATH")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$HOME")]),t._v("/rpi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v("\n")])])]),s("h3",{attrs:{id:"detailed-information"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#detailed-information"}},[t._v("#")]),t._v(" Detailed Information")]),t._v(" "),s("p",[t._v("Install the dependencies for "),s("RouterLink",{attrs:{to:"/ko/simulation/gazebo.html"}},[t._v("Gazebo Simulation")]),t._v(".")],1),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/ko/flight_controller/raspberry_pi_navio2.html"}},[t._v("Raspberry Pi 2/3 Navio2 Autopilot")]),t._v(".")],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/ko/flight_controller/raspberry_pi_pilotpi.html"}},[t._v("Raspberry Pi 2/3/4 PilotPi Shield")]),t._v(".")],1)]),t._v(" "),s("p",[s("a",{attrs:{id:"rosgazebo"}})]),t._v(" "),s("h2",{attrs:{id:"ros-gazebo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ros-gazebo"}},[t._v("#")]),t._v(" ROS/Gazebo")]),t._v(" "),s("p",[t._v("This section explains how to install "),s("RouterLink",{attrs:{to:"/ko/ros/"}},[t._v("ROS/Gazebo")]),t._v(' ("Melodic") for use with PX4.')],1),t._v(" "),s("p",[t._v("To install the development toolchain:")]),t._v(" "),s("ol",[s("li",[s("strong",[s("a",{attrs:{href:"https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/ubuntu_sim_ros_gazebo.sh",target:"_blank",download:""}},[t._v("ubuntu_sim_ros_gazebo.sh")])]),t._v(": "),s("strong",[t._v("ubuntu_sim_common_deps.sh")]),t._v(" + "),s("a",{attrs:{href:"#rosgazebo"}},[t._v("ROS/Gazebo and MAVROS")]),t._v("."),t._v("1. Download the desired script"),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v(" ubuntu_sim_ros_melodic.sh\n")])])]),t._v("You may need to acknowledge some prompts as the script progresses.")])]),t._v(" "),s("p",[t._v("Note:")]),t._v(" "),s("ul",[s("li",[t._v("ROS Kinetic is installed with Gazebo7 by default (we have chosen to use the default rather than Gazebo 8 to simplify ROS development).")]),t._v(" "),s("li",[t._v("Your catkin (ROS build system) workspace is created at "),s("strong",[t._v("~/catkin_ws/")]),t._v(".")]),t._v(" "),s("li",[t._v("The instructions come from the ROS Wiki "),s("a",{attrs:{href:"http://wiki.ros.org/kinetic/Installation/Ubuntu",target:"_blank",rel:"noopener noreferrer"}},[t._v("Ubuntu page"),s("OutboundLink")],1),t._v(".")])]),t._v(" "),s("h2",{attrs:{id:"snapdragon-flight"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#snapdragon-flight"}},[t._v("#")]),t._v(" Snapdragon Flight")]),t._v(" "),s("p",[t._v("Setup instructions for Snapdragon Flight are provided in the "),s("em",[t._v("PX4 User Guide")]),t._v(":")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/ko/flight_controller/snapdragon_flight_dev_environment_installation.html"}},[t._v("Development Environment")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/ko/flight_controller/snapdragon_flight_software_installation.html"}},[t._v("Software Installation")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/ko/flight_controller/snapdragon_flight_configuration.html"}},[t._v("Configuration")])],1)]),t._v(" "),s("p",[s("a",{attrs:{id:"fast_rtps"}})]),t._v(" "),s("h2",{attrs:{id:"fastrtps-installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fastrtps-installation"}},[t._v("#")]),t._v(" FastRTPS installation")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://eprosima-fast-rtps.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("eProsima Fast RTPS"),s("OutboundLink")],1),t._v(" is a C++ implementation of the RTPS (Real Time Publish Subscribe) protocol. FastRTPS is used, via the "),s("RouterLink",{attrs:{to:"/ko/middleware/micrortps.html"}},[t._v("RTPS/ROS2 Interface: PX4-FastRTPS Bridge")]),t._v(", to allow PX4 uORB topics to be shared with offboard components.")],1),t._v(" "),s("p",[t._v('{% include "_gcc_toolchain_installation.md" %}')]),t._v(" "),s("h2",{attrs:{id:"additional-tools"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#additional-tools"}},[t._v("#")]),t._v(" Additional Tools")]),t._v(" "),s("p",[t._v("After setting up the build/simulation toolchain, see "),s("RouterLink",{attrs:{to:"/ko/setup/generic_dev_tools.html"}},[t._v("Additional Tools")]),t._v(" for information about other useful tools.")],1),t._v(" "),s("h2",{attrs:{id:"next-steps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#next-steps"}},[t._v("#")]),t._v(" Next Steps")]),t._v(" "),s("p",[t._v("Once you have finished setting up the environment, continue to the "),s("RouterLink",{attrs:{to:"/ko/setup/building_px4.html"}},[t._v("build instructions")]),t._v(".")],1)])}),[],!1,null,null,null);e.default=n.exports}}]);