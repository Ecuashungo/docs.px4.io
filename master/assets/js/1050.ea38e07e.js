(window.webpackJsonp=window.webpackJsonp||[]).push([[1050],{2174:function(a,n,s){"use strict";s.r(n);var e=s(18),t=Object(e.a)({},(function(){var a=this,n=a.$createElement,s=a._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"payloads-and-cameras"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#payloads-and-cameras"}},[a._v("#")]),a._v(" Payloads and Cameras")]),a._v(" "),s("p",[a._v("PX4 supports a wide range of payloads and cameras.")]),a._v(" "),s("h2",{attrs:{id:"mapping-drones"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mapping-drones"}},[a._v("#")]),a._v(" Mapping Drones")]),a._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/ko/peripherals/camera.html"}},[a._v("Camera triggering")]),a._v(" via GPIO out")],1),a._v(" "),s("li",[s("RouterLink",{attrs:{to:"/ko/peripherals/camera.html"}},[a._v("Camera triggering")]),a._v(" via PWM out")],1),a._v(" "),s("li",[s("RouterLink",{attrs:{to:"/ko/peripherals/camera.html"}},[a._v("Camera triggering")]),a._v(" via MAVLink out")],1),a._v(" "),s("li",[s("RouterLink",{attrs:{to:"/ko/peripherals/camera.html#camera_capture"}},[a._v("Camera timing")]),a._v(" feedback via hotshoe input")],1)]),a._v(" "),s("h2",{attrs:{id:"cargo-drones-and-alike-servos-outputs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cargo-drones-and-alike-servos-outputs"}},[a._v("#")]),a._v(" Cargo drones and alike: Servos / Outputs")]),a._v(" "),s("ul",[s("li",[a._v("Servo or GPIO triggering (via RC or via commands)")])]),a._v(" "),s("h3",{attrs:{id:"example-mission-in-qgc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-mission-in-qgc"}},[a._v("#")]),a._v(" Example Mission (in QGC)")]),a._v(" "),s("p",[a._v("Use MAV_CMD_DO_SET_ACTUATOR to trigger one of the payload actuators.")]),a._v(" "),s("h3",{attrs:{id:"example-script-mavsdk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-script-mavsdk"}},[a._v("#")]),a._v(" Example script (MAVSDK)")]),a._v(" "),s("p",[a._v("This script sends a command to set the actuator and trigger the payload release on a servo:")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#include <mavsdk/mavsdk.h>\n#include <mavsdk/plugins/mavlink_passthrough/mavlink_passthrough.h>\n#include <mavsdk/plugins/info/info.h>\n#include <chrono>\n#include <cstdint>\n#include <iostream>\n#include <future>\n#include <memory>\n\nusing namespace mavsdk;\n\nvoid send_actuator(MavlinkPassthrough& mavlink_passthrough,\n        float value1, float value2, float value3);\n\nint main(int argc, char **argv)\n{\n    Mavsdk mavsdk;\n    std::string connection_url;\n    ConnectionResult connection_result;\n    float value1, value2, value3;\n\n    if (argc == 5) {\n        connection_url = argv[1];\n        connection_result = mavsdk.add_any_connection(connection_url);\n        value1 = std::stof(argv[2]);\n        value2 = std::stof(argv[3]);\n        value3 = std::stof(argv[4]);\n    } \n\n    if (connection_result != ConnectionResult::Success) {\n        std::cout << "Connection failed: " << connection_result << std::endl;\n        return 1;\n    }\n\n    bool discovered_system = false;\n    mavsdk.subscribe_on_new_system([&mavsdk, &discovered_system]() {\n        const auto system = mavsdk.systems().at(0);\n\n        if (system->is_connected()) {\n            std::cout << "Discovered system" << std::endl;\n            discovered_system = true;\n        }\n    });\n\n    std::this_thread::sleep_for(std::chrono::seconds(2));\n\n    if (!discovered_system) {\n        std::cout << "No device found, exiting." << std::endl;\n        return 1;\n    }\n\n    std::shared_ptr<System> system = mavsdk.systems().at(0);\n    for (auto& tsystem : mavsdk.systems()) {\n        auto info = Info{tsystem};\n        std::cout << info.get_identification().second.hardware_uid << std::endl;\n        if (info.get_identification().second.hardware_uid == "3762846593019032885") {\n            system = tsystem;\n        }\n    }\n\n    auto mavlink_passthrough = MavlinkPassthrough{system};\n\n    send_actuator(mavlink_passthrough, value1, value2, value3);\n\n    return 0;\n}\n\nvoid send_actuator(MavlinkPassthrough& mavlink_passthrough,\n        float value1, float value2, float value3)\n{\n    std::cout << "Sending message" << std::endl;\n    mavlink_message_t message;\n    mavlink_msg_command_long_pack(\n            mavlink_passthrough.get_our_sysid(),\n            mavlink_passthrough.get_our_compid(),\n            &message,\n            1, 1,\n            MAV_CMD_DO_SET_ACTUATOR,\n            0,\n            value1, value2, value3,\n            NAN, NAN, NAN, 0);\n    mavlink_passthrough.send_message(message);\n    std::cout << "Sent message" << std::endl;\n}\n')])])])])}),[],!1,null,null,null);n.default=t.exports}}]);