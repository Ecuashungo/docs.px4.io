(window.webpackJsonp=window.webpackJsonp||[]).push([[1222],{2599:function(t,a,s){"use strict";s.r(a);var e=s(19),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"px4-docker-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#px4-docker-容器"}},[t._v("#")]),t._v(" PX4 Docker 容器")]),t._v(" "),s("p",[t._v("Docker 容器被提供用于完整的 "),s("RouterLink",{attrs:{to:"/zh/setup/dev_env.html#supported-targets"}},[t._v("PX4 开发工具链")]),t._v("，包括基于 NuttX 和 Linux 的硬件，"),s("RouterLink",{attrs:{to:"/zh/simulation/gazebo.html"}},[t._v("Gazebo Simulation")]),t._v(" 和 "),s("RouterLink",{attrs:{to:"/zh/simulation/ros_interface.html"}},[t._v("ROS")]),t._v("。")],1),t._v(" "),s("p",[t._v("本主题说明如何使用 "),s("a",{attrs:{href:"#px4_containers"}},[t._v("available docker containers")]),t._v(" 访问本地 Linux 计算机中的构建环境。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Note")]),t._v(" Dockerfiles 和 README 可以在 "),s("a",{attrs:{href:"https://github.com/PX4/containers/tree/master/docker/px4-dev",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github here"),s("OutboundLink")],1),t._v("。 它们是在 "),s("a",{attrs:{href:"https://hub.docker.com/u/px4io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Hub"),s("OutboundLink")],1),t._v(" 上自动构建的。")])]),t._v(" "),s("h2",{attrs:{id:"系统必备组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统必备组件"}},[t._v("#")]),t._v(" 系统必备组件")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Note")]),t._v(" PX4 容器目前仅在 Linux 上受支持（如果您没有 Linux，则可以在虚拟机内运行容器 "),s("a",{attrs:{href:"#virtual_machine"}},[t._v("inside a virtual machine")]),t._v("）。 不要将 "),s("code",[t._v("boot2docker")]),t._v(" 与默认的 Linux 映像一起使用，因为它不包含 X-Server。")])]),t._v(" "),s("p",[t._v("为您的 Linux 计算机 "),s("a",{attrs:{href:"https://docs.docker.com/installation/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Install Docker"),s("OutboundLink")],1),t._v("，最好使用 Docker 维护的一个软件包存储库来获取最新的稳定版本。 您可以使用 "),s("em",[t._v("Enterprise Edition")]),t._v(" 或（free）"),s("em",[t._v("Community Edition")]),t._v("。")]),t._v(" "),s("p",[t._v("对于在 "),s("em",[t._v("Ubuntu")]),t._v(" 上本地安装非生产设置，安装 Docker 的最快捷最简单的方法是使用 "),s("a",{attrs:{href:"https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-using-the-convenience-script",target:"_blank",rel:"noopener noreferrer"}},[t._v("convenience script"),s("OutboundLink")],1),t._v("，如下所示（在同一页上找到替代安装方法）：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -fsSL get.docker.com -o get-docker.sh\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" get-docker.sh\n")])])]),s("p",[t._v("默认安装要求您以 root 用户身份调用 * Docker*（即使用"),s("code",[t._v("sudo")]),t._v("）。 如果您希望 "),s("a",{attrs:{href:"https://docs.docker.com/engine/installation/linux/linux-postinstall/#manage-docker-as-a-non-root-user",target:"_blank",rel:"noopener noreferrer"}},[t._v("use Docker as a non-root user"),s("OutboundLink")],1),t._v("，您可以选择将用户添加到“docker”组，然后注销或者登陆： That way, your build folder won't be owned by root after using docker.")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("＃创建 docker 组（可能不是必需的）\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("groupadd")]),t._v(" docker\n＃将您的用户添加到 docker 组。\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("usermod")]),t._v(" -aG docker $ "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("USER")]),t._v("\n＃在使用 docker 之前再次登录/注销！\n")])])]),s("p",[s("a",{attrs:{id:"px4_containers"}})]),t._v(" "),s("h2",{attrs:{id:"container-hierarchy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#container-hierarchy"}},[t._v("#")]),t._v(" Container Hierarchy")]),t._v(" "),s("p",[t._v("下面列出了可用的本地编辑（来自 "),s("a",{attrs:{href:"https://github.com/PX4/containers/blob/master/docker/px4-dev/README.md#container-hierarchy",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),s("OutboundLink")],1),t._v("）：")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("容器")]),t._v(" "),s("th",[t._v("描述")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("px4-dev-base")]),t._v(" "),s("td",[t._v("所有本地共有的基本设置")])]),t._v(" "),s("tr",[s("td",[t._v(" px4-dev-nuttx")]),t._v(" "),s("td",[t._v("NuttX 工具链")])]),t._v(" "),s("tr",[s("td",[t._v(" px4-dev-simulation")]),t._v(" "),s("td",[t._v("NuttX 工具链 + 仿真（jMAVSim，Gazebo）")])]),t._v(" "),s("tr",[s("td",[t._v("  px4-dev-ros")]),t._v(" "),s("td",[t._v("NuttX 工具链，仿真 + ROS（包括 MAVROS）")])]),t._v(" "),s("tr",[s("td",[t._v(" px4-dev-raspi")]),t._v(" "),s("td",[t._v("树莓派工具链")])]),t._v(" "),s("tr",[s("td",[t._v(" px4-dev-snapdragon")]),t._v(" "),s("td",[t._v("高通 Snapdragon Flight 工具链")])]),t._v(" "),s("tr",[s("td",[t._v(" px4-dev-clang")]),t._v(" "),s("td",[t._v("C 语言工具")])]),t._v(" "),s("tr",[s("td",[t._v("  px4-dev-nuttx-clang")]),t._v(" "),s("td",[t._v("C 语言与 NuttX 工具")])])])]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("latest")]),t._v(" 标记访问最新版本："),s("code",[t._v("px4io/px4-dev-ros:latest")]),t._v("（为 "),s("em",[t._v("hub.docker.com")]),t._v(" 上的每个容器列出可用标记。 例如，"),s("em",[t._v("px4-dev-ros")]),t._v(" 标签可以在 "),s("a",{attrs:{href:"https://hub.docker.com/r/px4io/px4-dev-ros/tags/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),s("OutboundLink")],1),t._v("）。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Tip")]),t._v(" 通常，您应该使用最近的模式，但不一定是最新的模式（因为这经常更改）。")])]),t._v(" "),s("h2",{attrs:{id:"使用-docker-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-docker-容器"}},[t._v("#")]),t._v(" 使用 Docker 容器")]),t._v(" "),s("p",[t._v("以下说明显示如何使用在 docker 容器中运行的工具链在主机上构建 PX4 源代码。 该信息假定您已将 PX4 源代码下载到 "),s("strong",[t._v("src/Firmware")]),t._v("，如下所示：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" src\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" src\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/PX4/Firmware.git\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" Firmware\n")])])]),s("h3",{attrs:{id:"助手脚本-docker-run-sh"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#助手脚本-docker-run-sh"}},[t._v("#")]),t._v(" 助手脚本（docker_run.sh）")]),t._v(" "),s("p",[t._v("使用容器的最简单方法是通过 "),s("a",{attrs:{href:"https://github.com/PX4/Firmware/blob/master/Tools/docker_run.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker_run.sh"),s("OutboundLink")],1),t._v(" 帮助程序脚本。 此脚本将 PX4 构建命令作为参数（例如 "),s("code",[t._v("make tests")]),t._v("）。 它使用适当容器和合理环境设置的最新版本（硬编码）启动 docker。")]),t._v(" "),s("p",[t._v("例如，要构建 SITL，您将调用（从 "),s("strong",[t._v("/Firmware")]),t._v(" 目录中）：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" ./Tools/docker_run.sh "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'make px4_sitl_default'")]),t._v("\n")])])]),s("p",[t._v("或者使用 NuttX 工具链启动 bash 会话：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo ./Tools/docker_run.sh 'bash'\n")])])]),s("blockquote",[s("p",[s("strong",[t._v("Tip")]),t._v(" 脚本很简单，因为您不需要了解 "),s("em",[t._v("Docker")]),t._v(" 或者考虑使用哪个容器。 但它不是特别准确！ 下面讨论的 "),s("a",{attrs:{href:"#manual_start"}},[t._v("section below")]),t._v(" 方法更灵活，如果您对脚本有任何问题，应该使用它。")])]),t._v(" "),s("p",[s("a",{attrs:{id:"manual_start"}})]),t._v(" "),s("h3",{attrs:{id:"手动调用-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手动调用-docker"}},[t._v("#")]),t._v(" 手动调用 Docker")]),t._v(" "),s("p",[t._v("典型命令的语法如下所示。 这将运行一个支持 X 指令的 Docker 容器（使容器内部的模拟 GUI 可用）。 它将目录 "),s("code",[t._v("&lt;host_src&gt;")]),t._v("from your computer to"),s("code",[t._v("&lt;container_src&gt;")]),t._v(" 容器内，并转发连接 "),s("em",[t._v("QGroundControl")]),t._v(" 所需的 UDP 端口。 使用 "),s("code",[t._v("-–privileged")]),t._v(" 选项，它将自动访问主机上的设备（例如操纵杆和 GPU）。 如果连接/断开设备，则必须重新启动容器。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# enable access to xhost from the container")]),t._v("\nxhost +\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run docker")]),t._v("\ndocker run -it --privileged "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --env"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("LOCAL_USER_ID"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" -u"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -v "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("host_src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("container_src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(":rw "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -v /tmp/.X11-unix:/tmp/.X11-unix:ro "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -e "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("DISPLAY")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":0 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -p "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14556")]),t._v(":14556/udp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("local_container_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("container"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("build_command"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("位置：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("&lt;host_src&gt;")]),t._v("：要映射到容器中的 "),s("code",[t._v("&lt;container_src&gt;")]),t._v(" 的主计算机目录。 这通常应该是 "),s("strong",[t._v("Firmware")]),t._v(" 目录。")]),t._v(" "),s("li",[s("code",[t._v("&lt;container_src&gt;")]),t._v("：容器内的共享（源）目录的位置。")]),t._v(" "),s("li",[s("code",[t._v("docker run")]),t._v(" 命令只能用于创建新容器。 要重新进入此容器（将保留您的更改），只需执行以下操作：")]),t._v(" "),s("li",[s("code",[t._v("&lt;container&gt;：&lt;tag&gt;")]),t._v("：具有版本标签的容器 - 例如："),s("code",[t._v("px4io/px4-dev-ros：2017-10-23")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("&lt;build_command&gt;")]),t._v("：要在新容器上调用的命令。 E.g. 例如. "),s("code",[t._v("bash")]),t._v(" 用于打开容器中的 bash shell。")])]),t._v(" "),s("p",[t._v("下面的具体示例显示了如何打开 bash shell 并在主机上共享目录 "),s("strong",[t._v("〜/src/Firmware")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# enable access to xhost from the container")]),t._v("\nxhost +\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run docker and open bash shell")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker run -it --privileged "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--env"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("LOCAL_USER_ID"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" -u"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-v ~/src/Firmware:/src/firmware/:rw "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-v /tmp/.X11-unix:/tmp/.X11-unix:ro "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-e "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("DISPLAY")])]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":0 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-p "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14556")]),t._v(":14556/udp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("mycontainer px4io/px4-dev-ros:2017-10-23 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n")])])]),s("p",[t._v("如果一切顺利，你现在应该在一个新的 bash shell 中。 通过运行验证一切是否正常，例如，SITL：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" src/firmware    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#This is &lt;container_src&gt;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" px4_sitl_default gazebo\n")])])]),s("h3",{attrs:{id:"重新进入容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重新进入容器"}},[t._v("#")]),t._v(" 重新进入容器")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v("docker run")]),t._v(" command can only be used to create a new container. To get back into this container (which will retain your changes) simply do:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# start the container")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker start container_name\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# open a new bash shell in this container")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it container_name "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n")])])]),s("p",[t._v("如果需要连接到容器的多个 shell，只需打开一个新 shell 并再次执行最后一个命令。")]),t._v(" "),s("h3",{attrs:{id:"清理容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清理容器"}},[t._v("#")]),t._v(" 清理容器")]),t._v(" "),s("p",[t._v("有时您可能需要完全清除容器。 您可以使用其名称来执行此操作：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" mycontainer\n")])])]),s("p",[t._v("如果您忘记了名称，则可以列出非活动容器 Id，然后将其删除，如下所示：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a -q\n45eeb98f1dd9\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" docker "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" 45eeb98f1dd9\n")])])]),s("h3",{attrs:{id:"qgroundcontrol"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qgroundcontrol"}},[t._v("#")]),t._v(" QGroundControl")]),t._v(" "),s("p",[t._v("运行模拟实例时，例如在 docker 容器内的 SITL 并通过 "),s("em",[t._v("QGroundControl")]),t._v(" 从主机控制它，必须手动设置通信链接。 "),s("em",[t._v("QGroundControl")]),t._v(" 的自动连接功能在此处不起作用。")]),t._v(" "),s("p",[t._v("在 "),s("em",[t._v("QGroundControl")]),t._v(" 中，导航至 "),s("a",{attrs:{href:"https://docs.qgroundcontrol.com/en/SettingsView/SettingsView.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Settings"),s("OutboundLink")],1),t._v(" 并选择“通信链接”。 创建使用 UDP 协议的新链接。 端口取决于使用的 "),s("a",{attrs:{href:"https://github.com/PX4/Firmware/tree/master/posix-configs/SITL",target:"_blank",rel:"noopener noreferrer"}},[t._v("configuration"),s("OutboundLink")],1),t._v("，例如 端口 14557 用于 SITL iris 配置。 IP 地址是您的 docker 容器之一，使用默认网络时通常为 172.17.0.1/16。 The IP address of the docker container can be found with the following command (assuming the container name is "),s("code",[t._v("mycontainer")]),t._v("):")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("code"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">&")]),t._v("lt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("local_container_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("/code"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("：正在创建的 docker 容器的名称 如果我们需要再次引用容器，以后可以使用它。\n")])])]),s("p",[t._v("：正在创建的 docker 容器的名称 如果我们需要再次引用容器，以后可以使用它。\n")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Note")]),t._v(" Spaces between double curly braces above should be not be present (they are needed to avoid a UI rendering problem in gitbook).")])]),t._v(" "),s("h3",{attrs:{id:"故障处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#故障处理"}},[t._v("#")]),t._v(" 故障处理")]),t._v(" "),s("h4",{attrs:{id:"权限错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#权限错误"}},[t._v("#")]),t._v(" 权限错误")]),t._v(" "),s("p",[t._v("容器根据需要使用默认用户创建文件-通常为“root”。 这可能导致权限错误，其中主机上的用户无法访问容器创建的文件。")]),t._v(" "),s("p",[t._v("上面的示例使用行 "),s("code",[t._v("-env=LOCAL_USER_ID=“$（id-u）”")]),t._v(" 在容器中创建具有与主机上的用户相同的 UID 的用户。 这可确保在主机上可以访问容器中创建的所有文件。")]),t._v(" "),s("h4",{attrs:{id:"图形驱动问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图形驱动问题"}},[t._v("#")]),t._v(" 图形驱动问题")]),t._v(" "),s("p",[t._v("运行 Gazebo 可能会导致类似以下错误消息：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("libGL error: failed to load driver: swrast\n")])])]),s("p",[t._v("在这种情况下，必须安装主机系统的本机图形驱动程序。 下载正确的驱动程序并将其安装在容器中。 对于 Nvidia 驱动程序，应使用以下命令（否则安装程序将从主机中看到已加载的模块并拒绝继续）：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("./NVIDIA-DRIVER.run -a -N --ui"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("none --no-kernel-module\n")])])]),s("p",[t._v("有关此内容的更多信息，请参见 "),s("a",{attrs:{href:"http://gernotklingler.com/blog/howto-get-hardware-accelerated-opengl-support-docker/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[s("a",{attrs:{id:"virtual_machine"}})]),t._v(" "),s("h2",{attrs:{id:"虚拟机支持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机支持"}},[t._v("#")]),t._v(" 虚拟机支持")]),t._v(" "),s("p",[t._v("任何最新的 Linux 发行版应该可行。")]),t._v(" "),s("p",[t._v("测试以下配置：")]),t._v(" "),s("ul",[s("li",[t._v("OS X 与 VMWare Fusion 和 Ubuntu 14.04（Parallels 上支持 GUI 的 Docker 容器使 X-Server 崩溃）。")])]),t._v(" "),s("p",[s("strong",[t._v("内存")])]),t._v(" "),s("p",[t._v("为虚拟机使用至少 4GB 内存。")]),t._v(" "),s("p",[s("strong",[t._v("编译方案")])]),t._v(" "),s("p",[t._v("如果编译失败，则出现以下错误：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("The bug is not reproducible, so it is likely a hardware or OS problem.\nThe bug is not reproducible, so it is likely a hardware or OS problem.\nc++: internal compiler error: Killed "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("program cc1plus"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("尝试禁用并行构建。")]),t._v(" "),s("p",[s("strong",[t._v("允许从 VM 主机控制 Docker")])]),t._v(" "),s("p",[t._v("编辑 "),s("code",[t._v("/etc/defaults/docker")]),t._v(" 并添加以下行：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DOCKER_OPTS")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${DOCKER_OPTS}")]),t._v(' -H unix:///var/run/docker.sock -H 0.0.0.0:2375"')]),t._v("\n")])])]),s("p",[t._v("然后，您可以从主机操作系统控制 docker：")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DOCKER_HOST")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tcp://"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("lt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ip")]),t._v(" of your VM"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("gt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(":2375\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# run some docker command to see if it works, e.g. ps")]),t._v("\ndocker "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);