(window.webpackJsonp=window.webpackJsonp||[]).push([[884],{1804:function(e,t,a){"use strict";a.r(t);var o=a(19),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"simulate-failsafes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simulate-failsafes"}},[e._v("#")]),e._v(" Simulate Failsafes")]),e._v(" "),a("p",[a("RouterLink",{attrs:{to:"/en/config/safety.html"}},[e._v("Failsafes")]),e._v(" define the safe limits/conditions under which you can safely use PX4, and the action that will be performed if a failsafe is triggered (for example, landing, holding position, or returning to a specified point).")],1),e._v(" "),a("p",[e._v("In SITL some failsafes are disabled by default to enable easier simulation usage.\nThis topic explains how you can test safety-critical behavior in SITL simulation before attempting it in the real world.")]),e._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("You can also test failsafes using "),a("RouterLink",{attrs:{to:"/en/simulation/hitl.html"}},[e._v("HITL simulation")]),e._v(".\nHITL uses the normal configuration parameters of your flight controller.")],1)]),e._v(" "),a("h2",{attrs:{id:"data-link-loss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#data-link-loss"}},[e._v("#")]),e._v(" Data Link Loss")]),e._v(" "),a("p",[e._v("The "),a("em",[e._v("Data Link Loss")]),e._v(" failsafe (unavailability of external data via MAVLink) is enabled by default.\nThis makes the simulation only usable with a connected GCS, SDK, or other MAVLink application.")]),e._v(" "),a("p",[e._v("Set the parameter "),a("RouterLink",{attrs:{to:"/en/advanced_config/parameter_reference.html#NAV_DLL_ACT"}},[e._v("NAV_DLL_ACT")]),e._v(" to the desired failsafe action to change the behavior.\nFor example, set to "),a("code",[e._v("0")]),e._v(" to disable it.")],1),e._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("All parameters in SITL including this one get reset when you do "),a("code",[e._v("make clean")]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"rc-link-loss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rc-link-loss"}},[e._v("#")]),e._v(" RC Link Loss")]),e._v(" "),a("p",[e._v("The "),a("em",[e._v("RC Link Loss")]),e._v(" failsafe (unavailability of data from a remote control) is enabled by default.\nThis makes the simulation only usable with either an active MAVLink or remote control connection.")]),e._v(" "),a("p",[e._v("Set the parameter "),a("RouterLink",{attrs:{to:"/en/advanced_config/parameter_reference.html#NAV_RCL_ACT"}},[e._v("NAV_RCL_ACT")]),e._v(" to the desired failsafe action to change the behavior.\nFor example, set to "),a("code",[e._v("0")]),e._v(" to disable it.")],1),e._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[e._v("Note")]),e._v(" "),a("p",[e._v("All parameters in SITL including this one get reset when you do "),a("code",[e._v("make clean")]),e._v(".")])]),e._v(" "),a("h2",{attrs:{id:"low-battery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#low-battery"}},[e._v("#")]),e._v(" Low Battery")]),e._v(" "),a("p",[e._v("The simulated battery is implemented to never run out of energy, and by default only depletes to 50% of its capacity and hence reported voltage.\nThis enables testing of battery indication in GCS UIs without triggering low battery reactions that might interrupt other testing.")]),e._v(" "),a("p",[e._v("To change this minimal battery percentage value use the parameter "),a("RouterLink",{attrs:{to:"/en/advanced_config/parameter_reference.html#SIM_BAT_MIN_PCT"}},[e._v("SIM_BAT_MIN_PCT")]),e._v(".")],1),e._v(" "),a("p",[e._v("To control how fast the battery depletes to the minimal value use the parameter "),a("RouterLink",{attrs:{to:"/en/advanced_config/parameter_reference.html#SIM_BAT_DRAIN"}},[e._v("SIM_BAT_DRAIN")]),e._v(".")],1),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("By changing "),a("RouterLink",{attrs:{to:"/en/advanced_config/parameter_reference.html#SIM_BAT_MIN_PCT"}},[e._v("SIM_BAT_MIN_PCT")]),e._v(" in flight, you can also test regaining capacity to simulate inaccurate battery state estimation or in-air charging technology.")],1)]),e._v(" "),a("h2",{attrs:{id:"sensor-system-failure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sensor-system-failure"}},[e._v("#")]),e._v(" Sensor/System Failure")]),e._v(" "),a("p",[e._v("System failure injection can be used to simulate different types of failures in many sensors and systems (e.g. GPS, barometer, gyro, avoidance etc.):")]),e._v(" "),a("ol",[a("li",[e._v("Enable the parameter "),a("RouterLink",{attrs:{to:"/en/advanced_config/parameter_reference.html#SYS_FAILURE_EN"}},[e._v("SYS_FAILURE_EN")]),e._v(".")],1),e._v(" "),a("li",[e._v("For example, to simulate losing and regaining GPS you might enter the following commands on the SITL instance "),a("em",[e._v("pxh shell")]),e._v(" (or MAVLink console)."),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Turn (all) GPS off")]),e._v("\nfailure gps off\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Turn (all) GPS on")]),e._v("\nfailure gps ok\n")])])])])]),e._v(" "),a("p",[e._v("The full syntax of the "),a("RouterLink",{attrs:{to:"/en/modules/modules_command.html#failure"}},[e._v("failure")]),e._v(" command is:")],1),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("failure <component> <failure_type> [-i <instance_number>]\n")])])]),a("p",[e._v("where:")]),e._v(" "),a("ul",[a("li",[a("em",[e._v("component")]),e._v(": "),a("code",[e._v("gyro")]),e._v(" | "),a("code",[e._v("accel")]),e._v(" | "),a("code",[e._v("mag")]),e._v(" | "),a("code",[e._v("baro")]),e._v(" | "),a("code",[e._v("gps")]),e._v(" | "),a("code",[e._v("optical_flow")]),e._v(" | "),a("code",[e._v("vio")]),e._v(" | "),a("code",[e._v("distance_sensor")]),e._v(" | "),a("code",[e._v("airspeed")]),e._v(" | "),a("code",[e._v("battery")]),e._v(" | "),a("code",[e._v("motor")]),e._v(" | "),a("code",[e._v("servo")]),e._v(" | "),a("code",[e._v("avoidance")]),e._v(" | "),a("code",[e._v("rc_signal")]),e._v(" | "),a("code",[e._v("mavlink_signal")])]),e._v(" "),a("li",[a("em",[e._v("failure_type")]),e._v(": "),a("code",[e._v("ok")]),e._v(" | "),a("code",[e._v("off")]),e._v(" | "),a("code",[e._v("stuck")]),e._v(" | "),a("code",[e._v("garbage")]),e._v(" | "),a("code",[e._v("wrong")]),e._v(" | "),a("code",[e._v("slow")]),e._v(" | "),a("code",[e._v("delayed")]),e._v(" | "),a("code",[e._v("intermittent")])]),e._v(" "),a("li",[a("em",[e._v("instance number")]),e._v(" (optional): Instance number of affected sensor.\n0 (default) indicates all sensors of specified type.")])])])}),[],!1,null,null,null);t.default=s.exports}}]);