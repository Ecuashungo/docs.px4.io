(window.webpackJsonp=window.webpackJsonp||[]).push([[1118],{2337:function(e,t,a){"use strict";a.r(t);var s=a(19),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"仿真调试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#仿真调试"}},[e._v("#")]),e._v(" 仿真调试")]),e._v(" "),a("p",[e._v("As the simulation is running on the host machine, all the desktop development tools are available.")]),e._v(" "),a("h2",{attrs:{id:"clang-address-sanitizer-mac-os-linux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clang-address-sanitizer-mac-os-linux"}},[e._v("#")]),e._v(" CLANG Address Sanitizer (Mac OS, Linux)")]),e._v(" "),a("p",[e._v("The Clang address sanitizer can help to find alignment (bus) errors and other memory faults like segmentation faults. The command below sets the right compile options. The command below sets the right compile options.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" clean "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 仅需在常规编译后，第一次运行 address sanitizer 时使用")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PX4_ASAN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" px4_sitl jmavsim\n")])])]),a("h2",{attrs:{id:"valgrind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#valgrind"}},[e._v("#")]),e._v(" Valgrind")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("brew "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" valgrind\n")])])]),a("p",[e._v("或")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" valgrind\n")])])]),a("p",[e._v("SITL can be launched with and without debugger attached and with either jMAVSim or Gazebo as simulation backend. This results in the start options below:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" px4_sitl_default   "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 通过 cmake 配置")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" -C build/px4_sitl_default jmavsim___gdb\n")])])]),a("h2",{attrs:{id:"start-combinations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-combinations"}},[e._v("#")]),e._v(" Start combinations")]),e._v(" "),a("p",[e._v("SITL can be launched with and without debugger attached and with either jMAVSim or Gazebo as simulation backend. This results in the start options below:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" px4_sitl_default jmavsim\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" px4_sitl_default jmavsim___gdb\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" px4_sitl_default jmavsim___lldb\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" px4_sitl_default gazebo\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" px4_sitl_default gazebo___gdb\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" px4_sitl_default gazebo___lldb\n")])])]),a("p",[e._v("where the last parameter is the <viewer_model_debugger> triplet (using three underscores implies the default 'iris' model). This will start the debugger and launch the SITL application. In order to break into the debugger shell and halt the execution, hit "),a("code",[e._v("CTRL-C")]),e._v(": This will start the debugger and launch the SITL application. In order to break into the debugger shell and halt the execution, hit "),a("code",[e._v("CTRL-C")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("Process "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("16529")]),e._v(" stopped\n* thread "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#1: tid = 0x114e6d, 0x00007fff90f4430a libsystem_kernel.dylib`__read_nocancel + 10, name = 'px4', queue = 'com.apple.main-thread', stop reason = signal SIGSTOP")]),e._v("\n    frame "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#0: 0x00007fff90f4430a libsystem_kernel.dylib`__read_nocancel + 10")]),e._v("\nlibsystem_kernel.dylib`__read_nocancel:\n-"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("  0x7fff90f4430a "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("+1"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("0")]),e._v(">")]),e._v(": jae    0x7fff90f44314            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("+2"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("0")]),e._v(">")]),e._v("\n    0x7fff90f4430c "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("+1"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("2")]),e._v(">")]),e._v(": movq   %rax, %rdi\n    0x7fff90f4430f "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("+1"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("5")]),e._v(">")]),e._v(": jmp    0x7fff90f3fc53            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" cerror_nocancel\n    0x7fff90f44314 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("+2"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("0")]),e._v(">")]),e._v(": retq\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("lldb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" \n")])])]),a("p",[e._v("In order to not have the DriverFrameworks scheduling interfere with the debugging session "),a("code",[e._v("SIGCONT")]),e._v(" should be masked in LLDB and GDB:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("lldb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" process handle SIGCONT -n "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" -p "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" -s "),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n")])])]),a("p",[e._v("Or in the case of GDB:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(gdb) handle SIGCONT noprint nostop\n")])])]),a("p",[e._v("After that the The lldb or gdb shells behave like normal sessions, please refer to the LLDB / GDB documentation.")]),e._v(" "),a("p",[e._v("The last parameter, the <viewer_model_debugger> triplet, is actually passed to make in the build directory, so")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" px4_sitl_default jmavsim___gdb\n")])])]),a("p",[e._v("is equivalent with")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" px4_sitl_default   "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Configure with cmake")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" -C build/px4_sitl_default jmavsim___gdb\n")])])]),a("p",[e._v("but for your convenience, a list with just the <viewer_model_debugger> triplets is printed with the command")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v("\n")])])]),a("p",[e._v("It is possible to suppress compiler optimization for given executables and/or modules (as added by cmake with "),a("code",[e._v("add_executable")]),e._v(" or "),a("code",[e._v("add_library")]),e._v(") when configuring for "),a("code",[e._v("posix_sitl_*")]),e._v(". This can be handy when it is necessary to step through code with a debugger or print variables that would otherwise be optimized out.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" list_vmd_make_targets\n")])])]),a("h2",{attrs:{id:"compiler-optimization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiler-optimization"}},[e._v("#")]),e._v(" Compiler optimization")]),e._v(" "),a("p",[e._v("It is possible to suppress compiler optimization for given executables and/or modules (as added by cmake with "),a("code",[e._v("add_executable")]),e._v(" or "),a("code",[e._v("add_library")]),e._v(") when configuring for "),a("code",[e._v("posix_sitl_*")]),e._v(". This can be handy when it is necessary to step through code with a debugger or print variables that would otherwise be optimized out.")]),e._v(" "),a("p",[e._v("To do so, set the environment variable "),a("code",[e._v("PX4_NO_OPTIMIZATION")]),e._v(" to be a semi-colon separated list of regular expressions that match the targets that need to be compiled without optimization. This environment variable is ignored when the configuration isn't "),a("code",[e._v("posix_sitl_*")]),e._v(". This environment variable is ignored when the configuration isn't "),a("code",[e._v("posix_sitl_*")]),e._v(".")]),e._v(" "),a("p",[e._v("would suppress optimization of the targets: platforms*_posix"),a("strong",[e._v("px4_layer, modules")]),e._v("systemlib, modules"),a("strong",[e._v("uORB, examples")]),e._v("px4_simple_app, modules**uORB*_uORB_tests and px4.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("PX4_NO_OPTIMIZATION")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'px4;^modules__uORB;^modules__systemlib$'")]),e._v("\n")])])]),a("p",[e._v("The targets that can be matched with these regular expressions can be printed with the command:")]),e._v(" "),a("p",[e._v("The targets that can be matched with these regular expressions can be printed with the command:")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" -C build/posix_sitl_* list_cmake_targets\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);