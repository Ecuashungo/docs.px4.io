(window.webpackJsonp=window.webpackJsonp||[]).push([[574],{1958:function(t,e,n){"use strict";n.r(e);var s=n(18),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"bash-on-windows-toolchain"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bash-on-windows-toolchain"}},[t._v("#")]),t._v(" Bash on Windows Toolchain")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Note")]),t._v(" The "),s("RouterLink",{attrs:{to:"/ko/setup/dev_env_windows_cygwin.html"}},[t._v("Windows Cygwin Toolchain")]),t._v(" is the (only) officially supported toolchain for Windows development.")],1)]),t._v(" "),s("p",[t._v("Windows users can alternatively install a "),s("em",[t._v("slightly modified")]),t._v(" Ubuntu Linux PX4 development environment within "),s("a",{attrs:{href:"https://github.com/Microsoft/BashOnWindows",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bash on Windows"),s("OutboundLink")],1),t._v(", and use it to:")]),t._v(" "),s("ul",[s("li",[t._v("Build firmware for NuttX/Pixhawk targets.")]),t._v(" "),s("li",[t._v("Run the PX4 JMAVSim simulation (using a Windows-hosted X-Windows app to display the UI)")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Note")]),t._v(" This mechanism only works on Windows 10. It essentially runs the toolchain in a virtual machine, and is relatively slow compared to other solutions.")])]),t._v(" "),s("h3",{attrs:{id:"setup-environment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#setup-environment"}},[t._v("#")]),t._v(" Setup Environment")]),t._v(" "),s("p",[t._v("The easiest way to setup the environment is to use the "),s("strong",[s("a",{attrs:{href:"https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/windows_bash_nuttx.sh",target:"_blank",download:""}},[t._v("windows_bash_nuttx.sh")])]),t._v(" script (details for script are "),s("a",{attrs:{href:"#build_script_details"}},[t._v("given below")]),t._v("). ")]),t._v(" "),s("p",[t._v("To setup the development environment:")]),t._v(" "),s("ol",[s("li",[t._v("Install "),s("a",{attrs:{href:"https://github.com/Microsoft/BashOnWindows",target:"_blank",rel:"noopener noreferrer"}},[t._v("Bash on Windows"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("li",[t._v("Open the bash shell.")]),t._v(" "),s("li",[t._v("Download the "),s("strong",[t._v("windows_bash_nuttx.sh")]),t._v(": "),s("code",[t._v("wget https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/windows_bash_nuttx.sh")])]),t._v(" "),s("li",[t._v("Run the script using the command below (acknowledging any prompts as required): sh source windows_bash_nuttx.sh")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v(" windows_bash_nuttx.sh\n")])])]),s("h3",{attrs:{id:"build-firmware"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-firmware"}},[t._v("#")]),t._v(" Build Firmware")]),t._v(" "),s("p",[t._v("cd ~/src/Firmware make px4_fmu-v4_default")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Enter the following commands in the bash shell:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("for px4_fmu-v4):\n")])])]),s("p",[t._v("On successful completion you'll find the firmware here: "),s("code",[t._v("Firmware/build/px4_fmu-v4_default/px4_fmu-v4_default.px4")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Note")]),t._v(" The "),s("code",[t._v("make")]),t._v(" commands to build firmware for other boards can be found in "),s("RouterLink",{attrs:{to:"/ko/setup/building_px4.html#nuttx--pixhawk-based-boards"}},[t._v("Building the Code")])],1)])]),t._v(" "),s("li",[s("p",[t._v("You can flash the custom firmware on Windows using "),s("em",[t._v("QGroundControl")]),t._v(" or "),s("em",[t._v("Mission Planner")]),t._v(" (it is not possible to directly flash the firmware from within the bash shell using the "),s("code",[t._v("upload")]),t._v(" command).")])])]),t._v(" "),s("h3",{attrs:{id:"simulation-jmavsim"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#simulation-jmavsim"}},[t._v("#")]),t._v(" Simulation (JMAVSim)")]),t._v(" "),s("p",[t._v("Bash on Windows does not include support for UI libraries. In order to display the jMAVSim UI you will first need to install an X-Window application like "),s("a",{attrs:{href:"https://sourceforge.net/projects/xming/",target:"_blank",rel:"noopener noreferrer"}},[t._v("XMing"),s("OutboundLink")],1),t._v(" into Windows.")]),t._v(" "),s("p",[t._v("To run JMAVSim:")]),t._v(" "),s("ol",[s("li",[t._v("Install and start "),s("a",{attrs:{href:"https://sourceforge.net/projects/xming/",target:"_blank",rel:"noopener noreferrer"}},[t._v("XMing"),s("OutboundLink")],1),t._v(" on Windows.")]),t._v(" "),s("li",[t._v("Enter the following command in the bash shell: sh export DISPLAY=:0 >"),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v("\n")])])])])]),t._v(" "),s("p",[t._v("export DISPLAY=:0\nexport GAZEBO_IP=127.0.0.1\nmake px4_sitl gazebo")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n> **Tip** Add this line to the Ubuntu **.bashrc** file if you don't want to enter it every session.\n1. Start PX4 and jMAVSim in the bash shell:\n```sh\nmake px4_sitl jmavsim\n")])])]),s("p",[t._v("The JMAVSim UI is then displayed in XMing as shown below:")]),t._v(" "),s("p",[s("img",{attrs:{src:n(682),alt:"jMAVSimOnWindows"}})]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Caution")]),t._v(" Gazebo can similarly be run within Ubuntu Bash for Windows, but too slow to be useful. To try this, follow the "),s("a",{attrs:{href:"http://wiki.ros.org/kinetic/Installation/Ubuntu",target:"_blank",rel:"noopener noreferrer"}},[t._v("ROS kinetic install guide"),s("OutboundLink")],1),t._v(" and run Gazebo in the Bash shell as shown:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code")])])]),t._v(" "),s("p",[t._v("export DISPLAY=:0\nexport GAZEBO_IP=127.0.0.1\nmake px4_sitl gazebo")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('\n<a id="build_script_details" mark="crwd-mark"></a>\n\n### Build Script Details\n\nThe [windows_bash_nuttx.sh](https://raw.githubusercontent.com/PX4/Devguide/master/build_scripts/windows_bash_nuttx.sh) build script modifies the Ubuntu build instructions to remove Ubuntu-specific and UI-dependent components, including the *Qt Creator* IDE and the simulators.\n\nIn addition, it uses a [64 bit arm-none-eabi compiler](https://github.com/SolinGuo/arm-none-eabi-bash-on-win10-.git) since BashOnWindows doesn\'t run 32 bit ELF programs (and the default compiler from `https://launchpad.net/gcc-arm-embedded` is 32 bit).\n\nTo add this compiler to your environment manually:\n\n1. Download the compiler:\n   ```sh\n   Download the compiler: \n     sh\n     wget https://github.com/SolinGuo/arm-none-eabi-bash-on-win10-/raw/master/gcc-arm-none-eabi-5_4-2017q2-20170512-linux.tar.bz2\n')])])]),s("ol",[s("li",[t._v("Unpack it using this command line in the Bash On Windows console: sh tar -xvf gcc-arm-none-eabi-5_4-2017q2-20170512-linux.tar.bz2 This will unpack the arm gcc cross-compiler to: "),s("code",[t._v("gcc-arm-none-eabi-5_4-2017q2/bin")]),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" -xvf gcc-arm-none-eabi-5_4-2017q2-20170512-linux.tar.bz2\n")])])]),t._v("This will unpack the arm gcc cross-compiler to:"),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("gcc-arm-none-eabi-5_4-2017q2/bin\n")])])])]),t._v(" "),s("li",[t._v("Add the to the environment (add the line to your bash profile to make the change permanent) "),s("code",[t._v("export PATH=$HOME/gcc-arm-none-eabi-5_4-2017q2/bin:\\$PATH")]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("export PATH=$HOME/gcc-arm-none-eabi-5_4-2017q2/bin:$PATH\n")])])])])])])}),[],!1,null,null,null);e.default=a.exports},682:function(t,e,n){t.exports=n.p+"assets/img/jmavsim_on_windows.2d0339ad.png"}}]);