(window.webpackJsonp=window.webpackJsonp||[]).push([[1040],{2201:function(t,e,a){"use strict";a.r(e);var s=a(18),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"px4-도커-컨테이너"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#px4-도커-컨테이너"}},[t._v("#")]),t._v(" PX4 도커 컨테이너")]),t._v(" "),a("p",[t._v("도커 컨테이너는 NuttX와 리눅스 기반 하드웨어 "),a("RouterLink",{attrs:{to:"/ko/simulation/gazebo.html"}},[t._v("가제보 모의시험")]),t._v(", "),a("RouterLink",{attrs:{to:"/ko/simulation/ros_interface.html"}},[t._v("ROS")]),t._v("가 들어있는 완전한 "),a("RouterLink",{attrs:{to:"/ko/dev_setup/dev_env.html#supported-targets"}},[t._v("PX4 개발 툴체인")]),t._v("을 제공합니다.")],1),t._v(" "),a("p",[t._v("이 주제에서는 로컬 리눅스 컴퓨터에서 빌드 환경에 접근할 수 있는 "),a("a",{attrs:{href:"#px4_containers"}},[t._v("가용 도커 컨테이너")]),t._v(" 활용법을 알려드리도록 하겠습니다.")]),t._v(" "),a("p",[t._v("리눅스 컴퓨터에 "),a("a",{attrs:{href:"https://docs.docker.com/installation/",target:"_blank",rel:"noopener noreferrer"}},[t._v("도커를 설치하십시오"),a("OutboundLink")],1),t._v(". 도커 사이트에서 관리하는 꾸러미 저장소에서 적당한 최신 안정 꾸러미 하나를 활용하십시오. "),a("em",[t._v("기업용판")]),t._v(" 또는 (무료) "),a("em",[t._v("커뮤니티판")]),t._v("을 활용할 수 있습니다.\n:::")]),t._v(" "),a("h2",{attrs:{id:"준비-요건"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#준비-요건"}},[t._v("#")]),t._v(" 준비 요건")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),a("p",[t._v("PX4 containers are currently only supported on Linux (if you don't have Linux you can run the container "),a("a",{attrs:{href:"#virtual_machine"}},[t._v("inside a virtual machine")]),t._v("). Do not use "),a("code",[t._v("boot2docker")]),t._v(" with the default Linux image because it contains no X-Server.")])]),t._v(" "),a("p",[t._v("기본 설치시 "),a("em",[t._v("도커")]),t._v("를 루트 사용자로 실행해야 합니다(예: "),a("code",[t._v("sudo")]),t._v(" 활용). 그러나 PX4 펌웨어를 빌드하려면 "),a("a",{attrs:{href:"https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user",target:"_blank",rel:"noopener noreferrer"}},[t._v("비 루트 사용자 계정으로 도커를 실행"),a("OutboundLink")],1),t._v(" 하시는게 좋습니다.")]),t._v(" "),a("p",[t._v("가용 컨테이너는 아래와 같습니다("),a("a",{attrs:{href:"https://github.com/PX4/containers/blob/master/README.md#container-hierarchy",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),a("OutboundLink")],1),t._v("에 있음):")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -fsSL get.docker.com -o get-docker.sh\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" get-docker.sh\n")])])]),a("p",[a("code",[t._v("px4io/px4-dev-nuttx:latest")]),t._v("와 같이 "),a("code",[t._v("latest")]),t._v(" 태그를 활용하면 가장 최근의 버전에 접근할 수 있습니다. (가용 태그는 "),a("em",[t._v("hub.docker.com")]),t._v("의 각 컨테이너에 들어있습니다. 예를 들면, "),a("a",{attrs:{href:"https://hub.docker.com/r/px4io/px4-dev-nuttx/tags",target:"_blank",rel:"noopener noreferrer"}},[t._v("여기"),a("OutboundLink")],1),t._v("에서는, "),a("em",[t._v("px4-dev-ros")]),t._v("태그를 찾아볼 수 있습니다). That way, your build folder won't be owned by root after using docker.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Create docker group (may not be required)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("groupadd")]),t._v(" docker\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add your user to the docker group.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("usermod")]),t._v(" -aG docker "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$USER")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Log in/out again before using docker!")]),t._v("\n")])])]),a("p",[a("a",{attrs:{id:"px4_containers"}})]),t._v(" "),a("h2",{attrs:{id:"컨테이너-계층"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#컨테이너-계층"}},[t._v("#")]),t._v(" 컨테이너 계층")]),t._v(" "),a("p",[t._v("The available containers are listed below (from "),a("a",{attrs:{href:"https://github.com/PX4/containers/blob/master/README.md#container-hierarchy",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),a("OutboundLink")],1),t._v("):")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("컨테이너")]),t._v(" "),a("th",[t._v("설명")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("px4-dev-base")]),t._v(" "),a("td",[t._v("모든 컨테이너에서 공통으로 활용하는 베이스 설치")])]),t._v(" "),a("tr",[a("td",[t._v(" px4-dev-nuttx")]),t._v(" "),a("td",[t._v("NuttX 툴체인")])]),t._v(" "),a("tr",[a("td",[t._v(" px4-dev-simulation")]),t._v(" "),a("td",[t._v("NuttX 툴체인 + 모의시험 (jMAVSim, Gazebo)")])]),t._v(" "),a("tr",[a("td",[t._v("  px4-dev-ros")]),t._v(" "),a("td",[t._v("NuttX 툴체인, 모의시험 + ROS (incl. MAVROS)")])]),t._v(" "),a("tr",[a("td",[t._v(" px4-dev-raspi")]),t._v(" "),a("td",[t._v("라즈베리 파이 툴체인")])]),t._v(" "),a("tr",[a("td",[t._v(" px4-dev-snapdragon")]),t._v(" "),a("td",[t._v("퀄컴 스냅드래곤 비행 툴체인")])]),t._v(" "),a("tr",[a("td",[t._v(" px4-dev-clang")]),t._v(" "),a("td",[t._v("clang 도구")])]),t._v(" "),a("tr",[a("td",[t._v("  px4-dev-nuttx-clang")]),t._v(" "),a("td",[t._v("clang과 NuttX 도구")])])])]),t._v(" "),a("p",[t._v("컨테이너를 활용하는 가장 쉬운 방법은 "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/blob/master/Tools/docker_run.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker_run.sh"),a("OutboundLink")],1),t._v(" 보조 스크립트를 활용한 방법입니다. 이 스크립트는 PX4 빌드 명령을 인자 값으로 취합니다 (예: "),a("code",[t._v("make tests")]),t._v(").")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("Typically you should use a recent container, but not necessarily the latest (as this changes too often).")])]),t._v(" "),a("h2",{attrs:{id:"도커-컨테이너-활용"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#도커-컨테이너-활용"}},[t._v("#")]),t._v(" 도커 컨테이너 활용")]),t._v(" "),a("p",[t._v("The following instructions show how to build PX4 source code on the host computer using a toolchain running in a docker container. The information assumes that you have already downloaded the PX4 source code to "),a("strong",[t._v("src/PX4-Autopilot")]),t._v(", as shown:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" src\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" src\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/PX4/PX4-Autopilot.git\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" PX4-Autopilot\n")])])]),a("h3",{attrs:{id:"보조-스크립트-docker-run-sh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#보조-스크립트-docker-run-sh"}},[t._v("#")]),t._v(" 보조 스크립트(docker_run.sh)")]),t._v(" "),a("p",[t._v("보통 사용하는 명령의 문법은 다음과 같습니다. 이 명령은 X 포워딩을 지원하는 도커 컨테이너를 실행합니다(컨테이너에서 모의시험 GUI 환경을 사용할 수 있습니다). 컴퓨터의 "),a("code",[t._v("<host_src>")]),t._v(" 디렉터리를 컨테이너의 "),a("code",[t._v("<container_src>")]),t._v(" 디렉터리로 대응하며 "),a("em",[t._v("QGroundControl")]),t._v("에 연결할 UDP 포트 데이터를 전달합니다.")]),t._v(" "),a("p",[t._v("여기서,")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("./Tools/docker_run.sh "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'make px4_sitl_default'")]),t._v("\n")])])]),a("p",[t._v("아래의 보강 예제에서는 호스트 컴퓨터에서 배시 셸을 열고 "),a("strong",[t._v("~/src/PX4-Autopilot")]),t._v("  디렉터리를 공유하는 방법을 보여줍니다.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("./Tools/docker_run.sh 'bash'\n")])])]),a("p",[t._v("모든 과정이 잘 넘어갔다면 새 배시 셸 상태에 있어야 합니다. 모든 요소가 제대로 동작하는지 검증하십시오. SITL을 예를 들자면: The manual approach discussed in the "),a("a",{attrs:{href:"#manual_start"}},[t._v("section below")]),t._v(" is more flexible and should be used if you have any problems with the script.\n:::")]),t._v(" "),a("p",[a("a",{attrs:{id:"manual_start"}})]),t._v(" "),a("h3",{attrs:{id:"도커-직접-호출"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#도커-직접-호출"}},[t._v("#")]),t._v(" 도커 직접 호출")]),t._v(" "),a("p",[a("code",[t._v("docker run")]),t._v(" 명령은 새 컨테이너를 만들 때만 사용합니다. 이 컨테이너로 돌아가려면 (바뀐 내용은 그대로 유지) 다음 명령을 실행하십시오: It maps the directory "),a("code",[t._v("<host_src>")]),t._v(" from your computer to "),a("code",[t._v("<container_src>")]),t._v(" inside the container and forwards the UDP port needed to connect "),a("em",[t._v("QGroundControl")]),t._v(". With the "),a("code",[t._v("-–privileged")]),t._v(" option it will automatically have access to the devices on your host (e.g. a joystick and GPU). If you connect/disconnect a device you have to restart the container.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# enable access to xhost from the container")]),t._v("\nxhost +\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run docker")]),t._v("\ndocker run -it --privileged "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("LOCAL_USER_ID"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" -u"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("host_src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("container_src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":rw "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -v /tmp/.X11-unix:/tmp/.X11-unix:ro "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("DISPLAY")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14570")]),t._v(":14570/udp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("local_container_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("build_command"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("컨테이너에 여러 셸을 연결해야 한다면, 새 셸을 열고 마지막 명령을 다시 실행하기만 하면 됩니다.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("<host_src>")]),t._v(": 컨테이너의 "),a("code",[t._v("<container_src>")]),t._v(" 디렉터리에 대응할 호스트 컴퓨터의 디렉터리입니다. 보통 "),a("strong",[t._v("Firmware")]),t._v(" 디렉터리입니다.")]),t._v(" "),a("li",[a("code",[t._v("<container_src>")]),t._v(": 컨테이너에 들어있는 공유 (소스) 디렉터리의 위치입니다.")]),t._v(" "),a("li",[a("code",[t._v("<local_container_name>")]),t._v(": 만들어 둔 도커 컨테이너의 이름입니다. 컨테이너를 나중에 다시 참조해야 할 때 활용할 수 있습니다.")]),t._v(" "),a("li",[a("code",[t._v("<container>:<tag>")]),t._v(": 시작할 컨테이너 이름과 버전입니다. 예시: "),a("code",[t._v("px4io/px4-dev-ros:2017-10-23")])]),t._v(" "),a("li",[a("code",[t._v("<build_command>")]),t._v(": 새 컨테이너에서 실행할 명령입니다. 예: "),a("code",[t._v("bash")]),t._v("는 컨테이너의 배시 셸을 여는데 사용하는 명령입니다.")])]),t._v(" "),a("p",[t._v("The concrete example below shows how to open a bash shell and share the directory "),a("strong",[t._v("~/src/PX4-Autopilot")]),t._v(" on the host computer.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# enable access to xhost from the container")]),t._v("\nxhost +\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run docker and open bash shell")]),t._v("\ndocker run -it --privileged "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("LOCAL_USER_ID"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" -u"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-v ~/src/PX4-Autopilot:/src/PX4-Autopilot/:rw "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-v /tmp/.X11-unix:/tmp/.X11-unix:ro "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("DISPLAY")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14570")]),t._v(":14570/udp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("mycontainer px4io/px4-dev-ros:2017-10-23 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n")])])]),a("p",[t._v("If everything went well you should be in a new bash shell now. Verify if everything works by running, for example, SITL:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" src/PX4-Autopilot    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#This is <container_src>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" px4_sitl_default gazebo\n")])])]),a("h3",{attrs:{id:"컨테이너-재진입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#컨테이너-재진입"}},[t._v("#")]),t._v(" 컨테이너 재진입")]),t._v(" "),a("p",[t._v("도커 컨테이너에서 SITL과 같은 모의시험 인스턴스를 실행하고 호스트에서  "),a("em",[t._v("QGroundControl")]),t._v("로 제어할 때, 통신 링크는 직접 설정해야합니다. 여기서 "),a("em",[t._v("QGroundControl")]),t._v("의 자동 연결 기능은 동작하지 않습니다.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# start the container")]),t._v("\ndocker start container_name\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# open a new bash shell in this container")]),t._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it container_name "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n")])])]),a("p",[t._v("If you need multiple shells connected to the container, just open a new shell and execute that last command again.")]),t._v(" "),a("h3",{attrs:{id:"컨테이너-정리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#컨테이너-정리"}},[t._v("#")]),t._v(" 컨테이너 정리")]),t._v(" "),a("p",[t._v('컨테이너에서는 기본 사용자 권한으로 필요한 파일을 만듭니다. 보통 기본 사용자는 "root"입니다. 이렇게 하면 호스트 컴퓨터의 사용자가 컨테이너에서 만든 파일에 접근할 수 없는 권한 오류가 나타납니다.')]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" mycontainer\n")])])]),a("p",[t._v("If you can't remember the name, then you can list inactive container ids and then delete them, as shown below:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a -q\n45eeb98f1dd9\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" 45eeb98f1dd9\n")])])]),a("h3",{attrs:{id:"qgroundcontrol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qgroundcontrol"}},[t._v("#")]),t._v(" QGroundControl")]),t._v(" "),a("p",[t._v("When running a simulation instance e.g. SITL inside the docker container and controlling it via "),a("em",[t._v("QGroundControl")]),t._v(" from the host, the communication link has to be set up manually. The autoconnect feature of "),a("em",[t._v("QGroundControl")]),t._v(" does not work here.")]),t._v(" "),a("p",[t._v("이 경우 호스트 시스템에 자체 그래픽 드라이버를 설치해야 합니다. 올바른 드라이버를 다운로드하시고 컨테이너 내부에 설치하십시오. 엔비디아 드라이버의 경우 다음 명령을 사용합니다(그렇지 않으면 호스트에서 불러온 모듈을 설치 관리자가 찾아내어 과정 진행을 거절합니다): The IP address is the one of your docker container, usually 172.17.0.1/16 when using the default network. The IP address of the docker container can be found with the following command (assuming the container name is "),a("code",[t._v("mycontainer")]),t._v("):")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ docker inspect -f "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}'")]),t._v(" mycontainer\n")])])]),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),a("p",[t._v("Spaces between double curly braces above should be not be present (they are needed to avoid a UI rendering problem in gitbook).")])]),t._v(" "),a("h3",{attrs:{id:"문제-해결"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#문제-해결"}},[t._v("#")]),t._v(" 문제 해결")]),t._v(" "),a("h4",{attrs:{id:"권한-오류"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#권한-오류"}},[t._v("#")]),t._v(" 권한 오류")]),t._v(" "),a("p",[t._v('The container creates files as needed with a default user - typically "root". This can lead to permission errors where the user on the host computer is not able to access files created by the container.')]),t._v(" "),a("p",[t._v("The example above uses the line "),a("code",[t._v('--env=LOCAL_USER_ID="$(id -u)"')]),t._v(" to create a user in the container with the same UID as the user on the host. This ensures that all files created within the container will be accessible on the host.")]),t._v(" "),a("h4",{attrs:{id:"그래픽-드라이버-문제"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#그래픽-드라이버-문제"}},[t._v("#")]),t._v(" 그래픽 드라이버 문제")]),t._v(" "),a("p",[t._v("It's possible that running Gazebo will result in a similar error message like the following:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("libGL error: failed to load driver: swrast\n")])])]),a("p",[t._v("In that case the native graphics driver for your host system must be installed. Download the right driver and install it inside the container. For Nvidia drivers the following command should be used (otherwise the installer will see the loaded modules from the host and refuse to proceed):")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("./NVIDIA-DRIVER.run -a -N --ui"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("none --no-kernel-module\n")])])]),a("p",[t._v("More information on this can be found "),a("a",{attrs:{href:"http://gernotklingler.com/blog/howto-get-hardware-accelerated-opengl-support-docker/",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[a("a",{attrs:{id:"virtual_machine"}})]),t._v(" "),a("h2",{attrs:{id:"가상-머신-지원"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#가상-머신-지원"}},[t._v("#")]),t._v(" 가상 머신 지원")]),t._v(" "),a("p",[t._v("다음 오류로 컴파일에 실패했을 경우:")]),t._v(" "),a("p",[t._v("병렬 빌드가 아닌 단일 빌드로 진행해보십시오.")]),t._v(" "),a("ul",[a("li",[t._v("OS X VMWare Fusion 환경에 Ubuntu 14.04 설치(GUI 지원 도커 컨테이너 병렬 실행시 X-Server 치명 오류 발생).")])]),t._v(" "),a("p",[a("strong",[t._v("가상 머신 호스트에서 도커 제어 허용")])]),t._v(" "),a("p",[a("code",[t._v("/etc/defaults/docker")]),t._v(" 파일을 편집하여 다음 줄을 추가하십시오:")]),t._v(" "),a("p",[a("strong",[t._v("Compilation problems")])]),t._v(" "),a("p",[t._v("If compilation fails with errors like this:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("The bug is not reproducible, so it is likely a hardware or OS problem.\nc++: internal compiler error: Killed "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("program cc1plus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("Try disabling parallel builds.")]),t._v(" "),a("p",[a("strong",[t._v("Allow Docker Control from the VM Host")])]),t._v(" "),a("p",[t._v("Edit "),a("code",[t._v("/etc/defaults/docker")]),t._v(" and add this line:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DOCKER_OPTS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${DOCKER_OPTS}")]),t._v(' -H unix:///var/run/docker.sock -H 0.0.0.0:2375"')]),t._v("\n")])])]),a("p",[t._v("You can then control docker from your host OS:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DOCKER_HOST")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tcp://"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ip of your VM"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":2375\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# run some docker command to see if it works, e.g. ps")]),t._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);