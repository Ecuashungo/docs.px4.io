(window.webpackJsonp=window.webpackJsonp||[]).push([[439],{2288:function(t,a,e){"use strict";e.r(a);var s=e(18),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"px4-系统架构概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#px4-系统架构概述"}},[t._v("#")]),t._v(" PX4 系统架构概述")]),t._v(" "),s("p",[t._v("PX4 由两个主要部分组成：一是 "),s("a",{attrs:{href:"#flight-stack"}},[t._v("飞行控制栈（flight stack）")]),t._v(" ，该部分主要包括状态估计和飞行控制系统；另一个是 "),s("a",{attrs:{href:"#middleware"}},[t._v("中间件")]),t._v(" ，该部分是一个通用的机器人应用层，可支持任意类型的自主机器人，主要负责机器人的内部/外部通讯和硬件整合。")]),t._v(" "),s("p",[t._v("所有的 PX4 支持的 "),s("RouterLink",{attrs:{to:"/zh/airframes/"}},[t._v("无人机机型")]),t._v(" （包括其他诸如无人船、无人车、无人水下航行器等平台）均共用同一个代码库。 整个系统采用了 "),s("a",{attrs:{href:"http://www.reactivemanifesto.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("响应式（reactive）"),s("OutboundLink")],1),t._v(" 设计，这意味着：")],1),t._v(" "),s("ul",[s("li",[t._v("所有的功能都可以被分割成若干可替换、可重复使用的部件。")]),t._v(" "),s("li",[t._v("通过异步消息传递进行通信。")]),t._v(" "),s("li",[t._v("系统可以应对不同的工作负载。")])]),t._v(" "),s("p",[s("a",{attrs:{id:"architecture"}})]),t._v(" "),s("h2",{attrs:{id:"顶层软件架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#顶层软件架构"}},[t._v("#")]),t._v(" 顶层软件架构")]),t._v(" "),s("p",[t._v("下面的架构图对 PX4 的各个积木模块以及各模块之间的联系进行了一个详细的概述。 图的上半部分包括了中间件模块，而下半部分展示的则是飞行控制栈的组件。")]),t._v(" "),s("p",[s("img",{attrs:{src:e(595),alt:"PX4 架构"}})]),t._v(" "),s("p",[t._v("源代码被拆分为许多相互独立的模块/程序 (图中使用 "),s("code",[t._v("monospace")]),t._v(" 字体表示)。 通常来说一个图中的积木块对应一个功能模块。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Tip")]),t._v(" 在运行期间，你可以在 shell 命令行界面执行 "),s("code",[t._v("top")]),t._v(" 命令检查哪些模块已经被执行了， 每个模块都可以通过 "),s("code",[t._v("<module_name> start/stop")]),t._v(" 命令单独进行启动/停止。 虽然 "),s("code",[t._v("top")]),t._v(" 命令仅针对 NuttX shell，但其他命令是可以在 SITL shell (pxh>) 中使用的。 如果想获取每个模块的详细信息，请参阅 "),s("RouterLink",{attrs:{to:"/zh/middleware/modules_main.html"}},[t._v("Modules & Commands Reference")]),t._v(" 。")],1)]),t._v(" "),s("p",[t._v("上图中的箭头表示的是各个模块之间 "),s("em",[t._v("最重要的")]),t._v(" 信息流连接。 实际运行时各模块之间信息流的连接数目比图中展示出来的要多很多，且部分数据（比如：配置参数）会被大部分模块访问。")]),t._v(" "),s("p",[t._v("PX4 系统通过一个名为 "),s("RouterLink",{attrs:{to:"/zh/middleware/uorb.html"}},[t._v("uORB")]),t._v(" 的 发布-订阅 消息总线实现模块之间的相互通讯。 使用 发布-订阅 消息总线这个方案意味着：")],1),t._v(" "),s("ul",[s("li",[t._v("系统是 “响应式” 的 — 系统异步运行，新数据抵达时系统立即进行更新。")]),t._v(" "),s("li",[t._v("系统所有的活动和通信都是完全并行的。")]),t._v(" "),s("li",[t._v("系统组件在任何地方都可以在保证线程安全的情况下使用数据。")])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Info")]),t._v(" 这种体系架构使得系统中每一个组件都可以快速、轻松地实现替换，即便系统此时正在运行。")])]),t._v(" "),s("p",[s("a",{attrs:{id:"flight-stack"}})]),t._v(" "),s("h3",{attrs:{id:"飞行控制栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#飞行控制栈"}},[t._v("#")]),t._v(" 飞行控制栈")]),t._v(" "),s("p",[t._v("飞行控制栈是针对自主无人机设计的导航、制导和控制算法的集合。 它包括了为固定翼、旋翼和 VTOL 无人机设计的控制器，以及相应的姿态、位置估计器。")]),t._v(" "),s("p",[t._v("The following diagram shows an overview of the building blocks of the flight stack. 下图展示了飞行控制栈的整体架构， 它包含了从传感器数据、 RC 控制量输入 到自主飞行控制（制导控制器，Navigator ），再到电机、舵机控制（执行器，Actuators）的全套通路。")]),t._v(" "),s("p",[s("img",{attrs:{src:e(596),alt:"PX4 顶层飞行控制栈"}})]),t._v(" "),s("p",[s("strong",[t._v("估计器 （estimator）")]),t._v(" 取一个或者多个传感器数据作为输入量，并进行数据融合进而计算出无人机的状态（例如：从 IMU 传感器数据计算得到无人机的姿态角）。")]),t._v(" "),s("p",[s("strong",[t._v("控制器 （controller）")]),t._v(" 组件以一个期望设定值和一个测量值或状态估计量（过程变量）作为输入， 它的目标是将过程变量的实际值调整到与期望设定值相一致， 得到的输出量实现对状态变量的矫正以使其最终抵达期望的设定值。 Its goal is to adjust the value of the process variable such that it matches the setpoint. The output is a correction to eventually reach that setpoint. 以位置控制器为例，该控制器以期望位置作为输入，过程变量是当前位置的估计值，控制器最终输出的是将引导无人机前往期望位置的姿态、油门指令。")]),t._v(" "),s("p",[s("strong",[t._v("混合器 （mixer）")]),t._v(" 响应力的指令（例如右转），并将其转换为单独的电机指令并保证产生的指令不超限。 每一类飞机都有特定的指令转换方式且受许多因素的影响，例如：电机关于重心的安装位置，飞机的惯性矩参数等。")]),t._v(" "),s("p",[s("a",{attrs:{id:"middleware"}})]),t._v(" "),s("h3",{attrs:{id:"中间件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中间件"}},[t._v("#")]),t._v(" 中间件")]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/zh/middleware/"}},[t._v("中间件")]),t._v(" 主要包由载嵌入式传感器驱动、与外界的通讯（配套计算机， GCS 等）以及 uORB 发布-订阅 消息总线三部分组成。")],1),t._v(" "),s("p",[t._v("此外，中间件还包括一个 "),s("RouterLink",{attrs:{to:"/zh/simulation/"}},[t._v("仿真应用层")]),t._v(" 以实现在桌面操作系统运行 PX4 飞行代码并在计算机的模拟“世界”中控制由计算机建模得到的无人机。")],1),t._v(" "),s("h2",{attrs:{id:"更新速率"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新速率"}},[t._v("#")]),t._v(" 更新速率")]),t._v(" "),s("p",[t._v("由于各模块都需要等待消息的更新，所以通常而言硬件的驱动程序决定着模块的更新速度。 大部分 IMU 驱动以 1kHz 的速率进行采样，以 250Hz 的速率发布传感器数据。 而系统的其它部分，比如说 "),s("code",[t._v("制导控制器 （navigator）")]),t._v("， 并不需要这么高的更新速率，因而运行的更新速度要慢的多。")]),t._v(" "),s("p",[t._v("消息的更新速率可以使用 "),s("code",[t._v("uorb top")]),t._v(" 命令实时 "),s("RouterLink",{attrs:{to:"/zh/middleware/uorb.html#urb-top-command"}},[t._v("查看")]),t._v(" 。")],1),t._v(" "),s("p",[s("a",{attrs:{id:"runtime-environment"}})]),t._v(" "),s("h2",{attrs:{id:"运行时的环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时的环境"}},[t._v("#")]),t._v(" 运行时的环境")]),t._v(" "),s("p",[t._v("PX4 可以在提供 POSIX-API 接口的各种操作系统上运行 （比如说 Linux, macOS, NuttX 和 QuRT）。 操作系统应该还具备某种形式的实时调度能力（例如 FIFO ）。")]),t._v(" "),s("p",[t._v("模块间通信 (使用 "),s("RouterLink",{attrs:{to:"/zh/middleware/uorb.html"}},[t._v("uORB")]),t._v(") 是基于贡献内存实现的。 整个 PX4 中间件在同一个地址空间内运行，即内存在所有模块之间共享。")],1),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("Info")]),t._v(" 整个系统被设计成仅需要很小的工作量就可以实现在单独的地址空间内运行各个模块（需要进行改动的部分主要包括 "),s("code",[t._v("uORB")]),t._v("，"),s("code",[t._v("parameter interface")]),t._v("，"),s("code",[t._v("dataman")]),t._v(" 以及 "),s("code",[t._v("perf")]),t._v("）。")])]),t._v(" "),s("p",[t._v("有 2 种不同的模块执行方式：")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("任务 （Tasks）")]),t._v(": 模块在它自己的任务中运行, 具有自己的堆栈和进程优先级（这是更常见的方法）。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("Note")]),t._v(" 在工作队列中的任务不会显示在 "),s("code",[t._v("top")]),t._v(" 中（你尽能看见工作队列本身，比如 "),s("code",[t._v("lpwork")]),t._v("）。")]),t._v(" "),s("ul",[s("li",[t._v("All the tasks must behave co-operatively as they cannot interrupt each other.")]),t._v(" "),s("li",[t._v("Multiple "),s("em",[t._v("work queue tasks")]),t._v(" can run on a queue, and there can be multiple queues.")]),t._v(" "),s("li",[t._v("A "),s("em",[t._v("work queue task")]),t._v(" is scheduled by specifying a fixed time in the future, or via uORB topic update callback.")])]),t._v(" "),s("p",[t._v("The advantage of running modules on a work queue is that it uses less RAM, and potentially results in fewer task switches. The disadvantages are that "),s("em",[t._v("work queue tasks")]),t._v(" are not allowed to sleep or poll on a message, or do blocking IO (such as reading from a file). Long-running tasks (doing heavy computation) should potentially also run in a separate task or at least a separate work queue.")])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("工作队列 （Work queues）")]),t._v("：模块在共享任务上运行, 这意味着它没有自己的堆栈。 Use "),s("RouterLink",{attrs:{to:"/zh/middleware/modules_system.html#workqueue"}},[s("code",[t._v("work_queue status")])]),t._v(" to display all active work queue items.")],1)]),t._v(" "),s("h3",{attrs:{id:"后台任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后台任务"}},[t._v("#")]),t._v(" 后台任务")]),t._v(" "),s("p",[s("code",[t._v("px4_task_spawn_cmd()")]),t._v(" 用于启动与父任务独立运行的新任务（NuttX）或者新线程（POSIX - Linux/macOS）：")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("independent_task "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("px4_task_spawn_cmd")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commander"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进程名称")]),t._v("\n    SCHED_DEFAULT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调度类型（RR 或 FIFO）")]),t._v("\n    SCHED_PRIORITY_DEFAULT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("40")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调度优先级")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3600")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("                           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新任务或线程的堆栈大小")]),t._v("\n    commander_thread_main"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 任务（或线程的主函数）")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("argv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Void 指针传递到新任务")]),t._v("\n                                    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// （这里是命令行参数）")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"操作系统相关的信息"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#操作系统相关的信息"}},[t._v("#")]),t._v(" 操作系统相关的信息")]),t._v(" "),s("h4",{attrs:{id:"nuttx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nuttx"}},[t._v("#")]),t._v(" NuttX")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://nuttx.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("NuttX"),s("OutboundLink")],1),t._v(" 是在飞控板上运行 PX4 的首选 RTOS 。 它是一个开源软件（BSD 许可）， 非常轻量化，运行高效且稳定。")]),t._v(" "),s("p",[t._v("各模块以任务（Task）模式运行：他们有各自的文件描述列表，但共用一个地址空间。 单个任务可以使用同一个文件描述列表启动单个或者多个线程。")]),t._v(" "),s("p",[t._v("每一个任务/线程都有一个固定大小的栈堆，并且有一个周期性的任务会定期检查所有栈堆都有足够的可用空间（基于 stack coloring）。")]),t._v(" "),s("h4",{attrs:{id:"linux-macos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux-macos"}},[t._v("#")]),t._v(" Linux/MacOS")]),t._v(" "),s("p",[t._v("在 Linux 或者 macOS 系统上， PX4 在一个单独的进程中运行，各个模块在各自线程中运行（在 NuttX 中任务和线程没有任何区别）。")])])}),[],!1,null,null,null);a.default=r.exports},595:function(t,a,e){t.exports=e.p+"assets/img/PX4_Architecture.fa89af6b.svg"},596:function(t,a,e){t.exports=e.p+"assets/img/PX4_High-Level_Flight-Stack.18829d0a.svg"}}]);