(window.webpackJsonp=window.webpackJsonp||[]).push([[1045],{2208:function(t,s,a){"use strict";a.r(s);var e=a(18),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"px4-도커-컨테이너"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#px4-도커-컨테이너"}},[t._v("#")]),t._v(" PX4 도커 컨테이너")]),t._v(" "),a("p",[t._v("도커 컨테이너는 NuttX와 리눅스 기반 하드웨어 "),a("RouterLink",{attrs:{to:"/ko/simulation/gazebo.html"}},[t._v("가제보 모의시험")]),t._v(", "),a("RouterLink",{attrs:{to:"/ko/simulation/ros_interface.html"}},[t._v("ROS")]),t._v("가 들어있는 완전한 "),a("RouterLink",{attrs:{to:"/ko/dev_setup/dev_env.html#supported-targets"}},[t._v("PX4 개발 툴체인")]),t._v("을 제공합니다.")],1),t._v(" "),a("p",[t._v("이 주제에서는 로컬 리눅스 컴퓨터에서 빌드 환경에 접근할 수 있는 "),a("a",{attrs:{href:"#px4_containers"}},[t._v("가용 도커 컨테이너")]),t._v(" 활용법을 알려드리도록 하겠습니다.")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),a("p",[t._v("Dockerfile 과 README 는 "),a("a",{attrs:{href:"https://github.com/PX4/containers/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("이 곳 Github"),a("OutboundLink")],1),t._v("에 있습니다. 이 파일은 "),a("a",{attrs:{href:"https://hub.docker.com/u/px4io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("도커 허브"),a("OutboundLink")],1),t._v("에 자동으로 만들어줍니다.")])]),t._v(" "),a("h2",{attrs:{id:"준비-요건"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#준비-요건"}},[t._v("#")]),t._v(" 준비 요건")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),a("p",[t._v("PX4 컨테이너는 현재 리눅스만 지원합니다(리눅스를 설치하지 않았다면 "),a("a",{attrs:{href:"#virtual_machine"}},[t._v("가상 머신에서")]),t._v(" 컨테이너를 실행할 수 있습니다). X 서버가 들어있지 않으므로 기본 리눅스 이미지에서 "),a("code",[t._v("boot2docker")]),t._v("를 실행하지 마십시오")])]),t._v(" "),a("p",[t._v("기본 설치시 "),a("em",[t._v("도커")]),t._v("를 루트 사용자로 실행해야 합니다(예: "),a("code",[t._v("sudo")]),t._v(" 활용). 그러나 PX4 펌웨어를 빌드하려면 "),a("a",{attrs:{href:"https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user",target:"_blank",rel:"noopener noreferrer"}},[t._v("비 루트 사용자 계정으로 도커를 실행"),a("OutboundLink")],1),t._v(" 하시는게 좋습니다.")]),t._v(" "),a("p",[t._v("가용 컨테이너는 아래와 같습니다("),a("a",{attrs:{href:"https://github.com/PX4/containers/blob/master/README.md#container-hierarchy",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),a("OutboundLink")],1),t._v("에 있음):")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -fsSL get.docker.com -o get-docker.sh\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" get-docker.sh\n")])])]),a("p",[a("code",[t._v("px4io/px4-dev-nuttx:latest")]),t._v("와 같이 "),a("code",[t._v("latest")]),t._v(" 태그를 활용하면 가장 최근의 버전에 접근할 수 있습니다. (가용 태그는 "),a("em",[t._v("hub.docker.com")]),t._v("의 각 컨테이너에 들어있습니다. 예를 들면, "),a("a",{attrs:{href:"https://hub.docker.com/r/px4io/px4-dev-nuttx/tags",target:"_blank",rel:"noopener noreferrer"}},[t._v("여기"),a("OutboundLink")],1),t._v("에서는, "),a("em",[t._v("px4-dev-ros")]),t._v("태그를 찾아볼 수 있습니다). 이렇게 하면, 도커를 활용하면서 빌드 폴더를 루트 소유로 만들지 않습니다.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Create docker group (may not be required)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("groupadd")]),t._v(" docker\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add your user to the docker group.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("usermod")]),t._v(" -aG docker "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("$USER")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Log in/out again before using docker!")]),t._v("\n")])])]),a("p",[a("a",{attrs:{id:"px4_containers"}})]),t._v(" "),a("h2",{attrs:{id:"컨테이너-계층"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#컨테이너-계층"}},[t._v("#")]),t._v(" 컨테이너 계층")]),t._v(" "),a("p",[t._v("가용 컨테이너는 아래와 같습니다("),a("a",{attrs:{href:"https://github.com/PX4/containers/blob/master/README.md#container-hierarchy",target:"_blank",rel:"noopener noreferrer"}},[t._v("Github"),a("OutboundLink")],1),t._v("에 있음):")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("컨테이너")]),t._v(" "),a("th",[t._v("설명")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("px4-dev-base")]),t._v(" "),a("td",[t._v("모든 컨테이너에서 공통으로 활용하는 베이스 설치")])]),t._v(" "),a("tr",[a("td",[t._v(" px4-dev-nuttx")]),t._v(" "),a("td",[t._v("NuttX 툴체인")])]),t._v(" "),a("tr",[a("td",[t._v(" px4-dev-simulation")]),t._v(" "),a("td",[t._v("NuttX 툴체인 + 모의시험 (jMAVSim, Gazebo)")])]),t._v(" "),a("tr",[a("td",[t._v("  px4-dev-ros")]),t._v(" "),a("td",[t._v("NuttX 툴체인, 모의시험 + ROS (incl. MAVROS)")])]),t._v(" "),a("tr",[a("td",[t._v(" px4-dev-raspi")]),t._v(" "),a("td",[t._v("라즈베리 파이 툴체인")])]),t._v(" "),a("tr",[a("td",[t._v(" px4-dev-snapdragon")]),t._v(" "),a("td",[t._v("퀄컴 스냅드래곤 비행 툴체인")])]),t._v(" "),a("tr",[a("td",[t._v(" px4-dev-clang")]),t._v(" "),a("td",[t._v("clang 도구")])]),t._v(" "),a("tr",[a("td",[t._v("  px4-dev-nuttx-clang")]),t._v(" "),a("td",[t._v("clang과 NuttX 도구")])])])]),t._v(" "),a("p",[t._v("컨테이너를 활용하는 가장 쉬운 방법은 "),a("a",{attrs:{href:"https://github.com/PX4/PX4-Autopilot/blob/master/Tools/docker_run.sh",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker_run.sh"),a("OutboundLink")],1),t._v(" 보조 스크립트를 활용한 방법입니다. 이 스크립트는 PX4 빌드 명령을 인자 값으로 취합니다 (예: "),a("code",[t._v("make tests")]),t._v(").")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("보통 최근의 컨테이너를 활용해야 하나, 최신이 필요한 것은 아닙니다 (변경이 너무 자주 일어나기 때문).")])]),t._v(" "),a("h2",{attrs:{id:"도커-컨테이너-활용"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#도커-컨테이너-활용"}},[t._v("#")]),t._v(" 도커 컨테이너 활용")]),t._v(" "),a("p",[t._v("다음 절차는 도커 컨테이너에서 실행하는 툴체인으로 호스트 컴퓨터에서 PX4 소스 코드를 빌드하는 방법을 보여줍니다. PX4 소스 코드를 다음과 같이 "),a("strong",[t._v("src/PX4-Autopilot")]),t._v("에 이미 다운로드했음을 가정합니다:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" src\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" src\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/PX4/PX4-Autopilot.git\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" PX4-Autopilot\n")])])]),a("h3",{attrs:{id:"보조-스크립트-docker-run-sh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#보조-스크립트-docker-run-sh"}},[t._v("#")]),t._v(" 보조 스크립트(docker_run.sh)")]),t._v(" "),a("p",[t._v("보통 사용하는 명령의 문법은 다음과 같습니다. 이 명령은 X 포워딩을 지원하는 도커 컨테이너를 실행합니다(컨테이너에서 모의시험 GUI 환경을 사용할 수 있습니다). 컴퓨터의 "),a("code",[t._v("<host_src>")]),t._v(" 디렉터리를 컨테이너의 "),a("code",[t._v("<container_src>")]),t._v(" 디렉터리로 대응하며 "),a("em",[t._v("QGroundControl")]),t._v("에 연결할 UDP 포트 데이터를 전달합니다.")]),t._v(" "),a("p",[t._v("여기서,")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("./Tools/docker_run.sh "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'make px4_sitl_default'")]),t._v("\n")])])]),a("p",[t._v("아래의 보강 예제에서는 호스트 컴퓨터에서 배시 셸을 열고 "),a("strong",[t._v("~/src/PX4-Autopilot")]),t._v("  디렉터리를 공유하는 방법을 보여줍니다.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("./Tools/docker_run.sh 'bash'\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("em",[t._v("도커")]),t._v("에 대해 더 많이 알 필요도 없거니와 컨테이너가 뭘 활용하는지 생각할 필요가 없기 때문에 스크립트를 활용하시는 편이 쉽습니다. 그러나 일부분은 온전하지 않습니다! "),a("a",{attrs:{href:"#manual_start"}},[t._v("아래 절")]),t._v("에서 다루는 내용을 통해 직접 접근하는 방식이 훨씬 유연하며, 스크립트에 어떤 문제가 있다면 오히려 아래와 같은 방식을 따라야합니다.")])]),t._v(" "),a("p",[a("a",{attrs:{id:"manual_start"}})]),t._v(" "),a("h3",{attrs:{id:"도커-직접-호출"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#도커-직접-호출"}},[t._v("#")]),t._v(" 도커 직접 호출")]),t._v(" "),a("p",[a("code",[t._v("docker run")]),t._v(" 명령은 새 컨테이너를 만들 때만 사용합니다. 이 컨테이너로 돌아가려면 (바뀐 내용은 그대로 유지) 다음 명령을 실행하십시오: 컴퓨터의 "),a("code",[t._v("<host_src>")]),t._v(" 디렉터리를 컨테이너의 "),a("code",[t._v("<container_src>")]),t._v(" 디렉터리로 대응하며 "),a("em",[t._v("QGroundControl")]),t._v("에 연결할 UDP 포트 데이터를 전달합니다. "),a("code",[t._v("-–privileged")]),t._v(" 옵션을 사용하면 호스트의 장치(예: 조이스틱, CPU)에 자동으로 접근합니다. 장치를 연결하거나 장치의 연결을 해제하고 나면 컨테이너를 다시 시작해야합니다.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# enable access to xhost from the container")]),t._v("\nxhost +\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run docker")]),t._v("\ndocker run -it --privileged "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("LOCAL_USER_ID"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" -u"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -v "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("host_src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("container_src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":rw "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -v /tmp/.X11-unix:/tmp/.X11-unix:ro "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("DISPLAY")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14570")]),t._v(":14570/udp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n    --name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("local_container_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("build_command"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("컨테이너에 여러 셸을 연결해야 한다면, 새 셸을 열고 마지막 명령을 다시 실행하기만 하면 됩니다.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("<host_src>")]),t._v(": 컨테이너의 "),a("code",[t._v("<container_src>")]),t._v(" 디렉터리에 대응할 호스트 컴퓨터의 디렉터리입니다. 보통 "),a("strong",[t._v("Firmware")]),t._v(" 디렉터리입니다.")]),t._v(" "),a("li",[a("code",[t._v("<container_src>")]),t._v(": 컨테이너에 들어있는 공유 (소스) 디렉터리의 위치입니다.")]),t._v(" "),a("li",[a("code",[t._v("<local_container_name>")]),t._v(": 만들어 둔 도커 컨테이너의 이름입니다. 컨테이너를 나중에 다시 참조해야 할 때 활용할 수 있습니다.")]),t._v(" "),a("li",[a("code",[t._v("<container>:<tag>")]),t._v(": 시작할 컨테이너 이름과 버전입니다. 예시: "),a("code",[t._v("px4io/px4-dev-ros:2017-10-23")])]),t._v(" "),a("li",[a("code",[t._v("<build_command>")]),t._v(": 새 컨테이너에서 실행할 명령입니다. 예: "),a("code",[t._v("bash")]),t._v("는 컨테이너의 배시 셸을 여는데 사용하는 명령입니다.")])]),t._v(" "),a("p",[t._v("아래의 보강 예제에서는 호스트 컴퓨터에서 배시 셸을 열고 "),a("strong",[t._v("~/src/PX4-Autopilot")]),t._v("  디렉터리를 공유하는 방법을 보여줍니다.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# enable access to xhost from the container")]),t._v("\nxhost +\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Run docker and open bash shell")]),t._v("\ndocker run -it --privileged "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--env"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("LOCAL_USER_ID"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),t._v(" -u"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-v ~/src/PX4-Autopilot:/src/PX4-Autopilot/:rw "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-v /tmp/.X11-unix:/tmp/.X11-unix:ro "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("DISPLAY")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(":0 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("14570")]),t._v(":14570/udp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("mycontainer px4io/px4-dev-ros:2017-10-23 "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n")])])]),a("p",[t._v("모든 과정이 잘 넘어갔다면 새 배시 셸 상태에 있어야 합니다. 모든 요소가 제대로 동작하는지 검증하십시오. SITL을 예를 들자면:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" src/PX4-Autopilot    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#This is <container_src>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v(" px4_sitl_default gazebo\n")])])]),a("h3",{attrs:{id:"컨테이너-재진입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#컨테이너-재진입"}},[t._v("#")]),t._v(" 컨테이너 재진입")]),t._v(" "),a("p",[t._v("도커 컨테이너에서 SITL과 같은 모의시험 인스턴스를 실행하고 호스트에서  "),a("em",[t._v("QGroundControl")]),t._v("로 제어할 때, 통신 링크는 직접 설정해야합니다. 여기서 "),a("em",[t._v("QGroundControl")]),t._v("의 자동 연결 기능은 동작하지 않습니다.")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# start the container")]),t._v("\ndocker start container_name\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# open a new bash shell in this container")]),t._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("exec")]),t._v(" -it container_name "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bash")]),t._v("\n")])])]),a("p",[t._v("컨테이너에 여러 셸을 연결해야 한다면, 새 셸을 열고 마지막 명령을 다시 실행하기만 하면 됩니다.")]),t._v(" "),a("h3",{attrs:{id:"컨테이너-정리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#컨테이너-정리"}},[t._v("#")]),t._v(" 컨테이너 정리")]),t._v(" "),a("p",[t._v('컨테이너에서는 기본 사용자 권한으로 필요한 파일을 만듭니다. 보통 기본 사용자는 "root"입니다. 이렇게 하면 호스트 컴퓨터의 사용자가 컨테이너에서 만든 파일에 접근할 수 없는 권한 오류가 나타납니다.')]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" mycontainer\n")])])]),a("p",[t._v("이름을 기억할 수 없다면, 비활성 컨테이너 ID를 조회한 후 다음과 같이 삭제하십시오:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -a -q\n45eeb98f1dd9\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" 45eeb98f1dd9\n")])])]),a("h3",{attrs:{id:"qgroundcontrol"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qgroundcontrol"}},[t._v("#")]),t._v(" QGroundControl")]),t._v(" "),a("p",[t._v("도커 컨테이너에서 SITL과 같은 모의시험 인스턴스를 실행하고 호스트에서  "),a("em",[t._v("QGroundControl")]),t._v("로 제어할 때, 통신 링크는 직접 설정해야합니다. 여기서 "),a("em",[t._v("QGroundControl")]),t._v("의 자동 연결 기능은 동작하지 않습니다.")]),t._v(" "),a("p",[t._v("이 경우 호스트 시스템에 자체 그래픽 드라이버를 설치해야 합니다. 올바른 드라이버를 다운로드하시고 컨테이너 내부에 설치하십시오. 엔비디아 드라이버의 경우 다음 명령을 사용합니다(그렇지 않으면 호스트에서 불러온 모듈을 설치 관리자가 찾아내어 과정 진행을 거절합니다): IP 주소는 도커 컨테이너 중 하나를 나타냅니다. 보통 기본 네트워크 설정을 활용한다면 172.17.0.1/16입니다. 도커 컨테이너의 IP 주소는 다음 명령으로 확인할 수 있습니다(컨테이너 이름은 "),a("code",[t._v("mycontainer")]),t._v("로 가정합니다):")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ docker inspect -f "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{ {range .NetworkSettings.Networks}}{ {.IPAddress}}{ {end}}'")]),t._v(" mycontainer\n")])])]),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("Note")]),t._v(" "),a("p",[t._v("이중 중괄호 사이에 공백문자를 두어서는 안됩니다(gitbook의 인터페이스 렌더링 문제로 일부러 빈칸을 두었습니다).")])]),t._v(" "),a("h3",{attrs:{id:"문제-해결"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#문제-해결"}},[t._v("#")]),t._v(" 문제 해결")]),t._v(" "),a("h4",{attrs:{id:"권한-오류"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#권한-오류"}},[t._v("#")]),t._v(" 권한 오류")]),t._v(" "),a("p",[t._v('컨테이너에서는 기본 사용자 권한으로 필요한 파일을 만듭니다. 보통 기본 사용자는 "root"입니다. 이렇게 하면 호스트 컴퓨터의 사용자가 컨테이너에서 만든 파일에 접근할 수 없는 권한 오류가 나타납니다.')]),t._v(" "),a("p",[t._v("위 예제에서는 호스트 사용자와 동일한 UID로 컨테이너의 사용자를 만들 때 "),a("code",[t._v('--env=LOCAL_USER_ID="$(id -u)"')]),t._v(" 행을 활용합니다. 이 명령을 사용하면 호스트에서 컨테이너에 만든 모든 파일을 접근할 수 있습니다.")]),t._v(" "),a("h4",{attrs:{id:"그래픽-드라이버-문제"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#그래픽-드라이버-문제"}},[t._v("#")]),t._v(" 그래픽 드라이버 문제")]),t._v(" "),a("p",[t._v("가제보 실행시 다음과 같은 오류 메시지가 나타날 수 있습니다:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("libGL error: failed to load driver: swrast\n")])])]),a("p",[t._v("이 경우 호스트 시스템에 자체 그래픽 드라이버를 설치해야 합니다. 올바른 드라이버를 다운로드하시고 컨테이너 내부에 설치하십시오. 엔비디아 드라이버의 경우 다음 명령을 사용합니다(그렇지 않으면 호스트에서 불러온 모듈을 설치 관리자가 찾아내어 과정 진행을 거절합니다):")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("./NVIDIA-DRIVER.run -a -N --ui"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("none --no-kernel-module\n")])])]),a("p",[t._v("더 많은 정보는 "),a("a",{attrs:{href:"http://gernotklingler.com/blog/howto-get-hardware-accelerated-opengl-support-docker/",target:"_blank",rel:"noopener noreferrer"}},[t._v("여기"),a("OutboundLink")],1),t._v("에서 찾을 수 있습니다.")]),t._v(" "),a("p",[a("a",{attrs:{id:"virtual_machine"}})]),t._v(" "),a("h2",{attrs:{id:"가상-머신-지원"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#가상-머신-지원"}},[t._v("#")]),t._v(" 가상 머신 지원")]),t._v(" "),a("p",[t._v("다음 오류로 컴파일에 실패했을 경우:")]),t._v(" "),a("p",[t._v("병렬 빌드가 아닌 단일 빌드로 진행해보십시오.")]),t._v(" "),a("ul",[a("li",[t._v("OS X VMWare Fusion 환경에 Ubuntu 14.04 설치(GUI 지원 도커 컨테이너 병렬 실행시 X-Server 치명 오류 발생).")])]),t._v(" "),a("p",[a("strong",[t._v("가상 머신 호스트에서 도커 제어 허용")])]),t._v(" "),a("p",[a("code",[t._v("/etc/defaults/docker")]),t._v(" 파일을 편집하여 다음 줄을 추가하십시오:")]),t._v(" "),a("p",[a("strong",[t._v("컴파일 문제")])]),t._v(" "),a("p",[t._v("다음 오류로 컴파일에 실패했을 경우:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("The bug is not reproducible, so it is likely a hardware or OS problem.\nc++: internal compiler error: Killed "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("program cc1plus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("동시 빌드가 아닌 단일 빌드로 진행해보십시오.")]),t._v(" "),a("p",[a("strong",[t._v("가상 머신 호스트에서 도커 제어 허용")])]),t._v(" "),a("p",[a("code",[t._v("/etc/defaults/docker")]),t._v(" 파일을 편집하여 다음 줄을 추가하십시오:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DOCKER_OPTS")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${DOCKER_OPTS}")]),t._v(' -H unix:///var/run/docker.sock -H 0.0.0.0:2375"')]),t._v("\n")])])]),a("p",[t._v("이제 호스트 운영체제에서 도커를 제어할 수 있습니다:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("DOCKER_HOST")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tcp://"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("ip of your VM"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(":2375\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# run some docker command to see if it works, e.g. ps")]),t._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);